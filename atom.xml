<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lesley&#39;s 博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-04T14:27:33.463Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lesley Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>若干Python性能优化小tips</title>
    <link href="http://yoursite.com/2019/03/04/fasterpython/"/>
    <id>http://yoursite.com/2019/03/04/fasterpython/</id>
    <published>2019-03-04T13:30:50.000Z</published>
    <updated>2019-03-04T14:27:33.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>若干简单易实现的Python性能优化小tips。</p><p>部分参考：<a href="https://segmentfault.com/a/1190000000666603" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000666603</a></p><p>一些tips在刷题过程确实得到验证，尚有一些未验证但在实际简单测试中效率有提升。<br><a id="more"></a></p><h3 id="优化算法时间复杂度"><a href="#优化算法时间复杂度" class="headerlink" title="优化算法时间复杂度"></a>优化算法时间复杂度</h3></blockquote><p>不论什么语言，算法的时间复杂度对程序的执行效率都有决定性影响，在Python中可以通过选择合适的数据结构来优化时间复杂度，如list和set查找指定元素的时间复杂度分别为O(n)和O(1)。同时，可以根据具体情况，采用分治、贪心、动态规划等算法思想。（不过优化算法有些有时候也不是很容易实现，，，）</p><p>在算法的常见时间复杂度上排序如下：</p><script type="math/tex; mode=display">O(1)<O(\log n)<O(n\log n)<O(n^2)<O(n^3)<O(n^k)<O(k^n)<O(n!)</script><h3 id="使用dict或set查找元素"><a href="#使用dict或set查找元素" class="headerlink" title="使用dict或set查找元素"></a>使用dict或set查找元素</h3><p>Python中的dict和set是使用hash表实现的，因此查找元素的最优时间复杂度为O(1)，而list是线性表结构，其查询时间复杂度为O(n)。</p><p>因此，<strong>在需要频繁查找或访问的时候，依据实际情况使用dict或set，要比使用list更快</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run on jupyter-notebook</span></span><br><span class="line">a = range(<span class="number">1000</span>)</span><br><span class="line">s = set(a)</span><br><span class="line">d = dict((i,<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> a)</span><br><span class="line">%timeit -n <span class="number">10000</span> <span class="number">100</span> <span class="keyword">in</span> d</span><br><span class="line">%timeit -n <span class="number">10000</span> <span class="number">100</span> <span class="keyword">in</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 56.5 ns per loop</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 38.8 ns per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用set进行交并差运算"><a href="#使用set进行交并差运算" class="headerlink" title="使用set进行交并差运算"></a>使用set进行交并差运算</h3><p>set的union、intersection、difference操作要比使用list迭代快，因此涉及list求交集、并集、差集的问题，可以通过转换为set来操作。</p><p>set的交并差操作语法：</p><ul><li>交集：<code>set(list1)&amp;set(list2)</code></li><li>并集：<code>set(list1)|set(list2)</code></li><li>差集：<code>set(list1)-set(list2)</code></li></ul><p>使用list迭代方法求两个list交集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">1000</span></span><br><span class="line">lista=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">42</span>,<span class="number">44</span>] </span><br><span class="line">listb=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">23</span>] </span><br><span class="line">intersection=[] </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> lista: </span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> listb: </span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            intersection.append(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 3.58 µs per loop</span></span><br></pre></td></tr></table></figure><p>将list转为set后求交集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">1000</span></span><br><span class="line">lista=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">42</span>,<span class="number">44</span>] </span><br><span class="line">listb=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">23</span>] </span><br><span class="line">intersection=[] </span><br><span class="line">list(set(lista)&amp;set(listb))</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 1.58 µs per loop</span></span><br></pre></td></tr></table></figure><h3 id="优化循环"><a href="#优化循环" class="headerlink" title="优化循环"></a>优化循环</h3><p>对循环的优化遵循的原则是<strong>尽量减少循环过程中计算量</strong>，循环外可以做的事情不要放到循环内做，多重循环尽量将内层的计算提到上一层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run on jupyter-notebook</span></span><br><span class="line">a = range(<span class="number">10000</span>)</span><br><span class="line">size_a = len(a)</span><br><span class="line">%timeit -n <span class="number">1000</span> <span class="keyword">for</span> i <span class="keyword">in</span> a: k = len(a)</span><br><span class="line">%timeit -n <span class="number">1000</span> <span class="keyword">for</span> i <span class="keyword">in</span> a: k = size_a</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 361 µs per loop</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 161 µs per loop</span></span><br></pre></td></tr></table></figure><h3 id="优化多个判断表达式的顺序"><a href="#优化多个判断表达式的顺序" class="headerlink" title="优化多个判断表达式的顺序"></a>优化多个判断表达式的顺序</h3><p><strong>对于and，把满足条件少的表达式放在前面判断；对于or，把满足条件多的表达式放在后面判断。</strong></p><p>Python中的条件表达式是<code>lazy evaluation</code>的，也就是说对于表达式<code>if a and b</code>，在<code>a 为 false</code>的情况下，<code>b</code>表达式的值将不再计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run on jupyter-notebook</span></span><br><span class="line">a = range(<span class="number">2000</span>)  </span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &lt; <span class="number">20</span> <span class="keyword">or</span> <span class="number">1000</span> &lt; i &lt; <span class="number">2000</span>]</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> <span class="number">1000</span> &lt; i &lt; <span class="number">2000</span> <span class="keyword">or</span> i &lt; <span class="number">20</span>]     </span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> i &gt; <span class="number">1900</span>]</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt; <span class="number">1900</span> <span class="keyword">and</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">98.1</span> µs per loop</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">78.9</span> µs per loop</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">88.1</span> µs per loop</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">37.4</span> µs per loop</span><br></pre></td></tr></table></figure><h3 id="字符串的优化"><a href="#字符串的优化" class="headerlink" title="字符串的优化"></a>字符串的优化</h3><p><strong>Python中的字符串对象是不可改变的</strong>，因此对字符串的操作如拼接、修改等都会产生一个新的字符串对象，而不是基于原字符串，这种持续的copy过程会在一定程度上影响Python的性能，特别是处理文本较多的情况下。</p><h4 id="字符串连接尽量使用join，而不是"><a href="#字符串连接尽量使用join，而不是" class="headerlink" title="字符串连接尽量使用join，而不是+"></a>字符串连接尽量使用join，而不是+</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">100</span></span><br><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>]  </span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    s += i</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 880 ns per loop</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">100</span></span><br><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>]</span><br><span class="line">s = <span class="string">""</span>.join(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 570 ns per loop</span></span><br></pre></td></tr></table></figure><h4 id="尽量使用内置函数判断，而不是正则表达式"><a href="#尽量使用内置函数判断，而不是正则表达式" class="headerlink" title="尽量使用内置函数判断，而不是正则表达式"></a>尽量使用内置函数判断，而不是正则表达式</h4><p>在对字符串可以使用正则表达式或者内置函数进行判断时，尽量使用内置函数，如<code>str.isalpha(), str.isdigit(), str.startswith((&quot;x&quot;,&quot;y&quot;)), str.endswith((&quot;x&quot;,&quot;y&quot;))</code>。</p><h3 id="不使用中间变量交换两个变量的值"><a href="#不使用中间变量交换两个变量的值" class="headerlink" title="不使用中间变量交换两个变量的值"></a>不使用中间变量交换两个变量的值</h3><p>使用<code>a,b=b,a</code>的形式来交换<code>a,b</code>两个变量的值。</p><p>（实际简单测试过程中，时间差距并不总是很大，还没深究速度差异的内在原因。）</p><p>借助中间变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10000</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">c=a</span><br><span class="line">a=b</span><br><span class="line">b=c</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 68.5 ns per loop</span></span><br></pre></td></tr></table></figure><p>不借助中间变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10000</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 38.3 ns per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用if-is，而不是"><a href="#使用if-is，而不是" class="headerlink" title="使用if is，而不是=="></a>使用<code>if is</code>，而不是<code>==</code></h3><p>使用<code>if a is True</code>要比使用<code>if a == True</code>快，同理<code>if a is not Noe</code>要比<code>if a != None</code>快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = range(<span class="number">10000</span>)</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i == <span class="literal">True</span>]</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i <span class="keyword">is</span> <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 370 µs per loop</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 248 µs per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用级联比较x-lt-y-lt-z"><a href="#使用级联比较x-lt-y-lt-z" class="headerlink" title="使用级联比较x&lt;y&lt;z"></a>使用级联比较<code>x&lt;y&lt;z</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">%timeit -n <span class="number">1000000</span> <span class="keyword">if</span> x &lt; y &lt; z:<span class="keyword">pass</span></span><br><span class="line">%timeit -n <span class="number">1000000</span> <span class="keyword">if</span> x &lt; y <span class="keyword">and</span> y &lt; z:<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000000 loops, best of 3: 47.8 ns per loop</span></span><br><span class="line"><span class="comment"># 1000000 loops, best of 3: 50.2 ns per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用while-1，而不是while-True"><a href="#使用while-1，而不是while-True" class="headerlink" title="使用while 1，而不是while True"></a>使用<code>while 1</code>，而不是<code>while True</code></h3><p>在Python2.x中，True是全局变量，而不是关键字？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_1</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">100000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_true</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">100000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">break</span>    </span><br><span class="line"></span><br><span class="line">m, n = <span class="number">1000000</span>, <span class="number">1000000</span> </span><br><span class="line">%timeit -n <span class="number">100</span> while_1()</span><br><span class="line">%timeit -n <span class="number">100</span> while_true()</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 2.2 ms per loop</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 3.4 ms per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用-，而不是pow"><a href="#使用-，而不是pow" class="headerlink" title="使用**，而不是pow"></a>使用<code>**</code>，而不是<code>pow</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%timeit -n <span class="number">10000</span> c = pow(<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">%timeit -n <span class="number">10000</span> c = <span class="number">2</span>**<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 207 ns per loop</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 16.4 ns per loop</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;若干简单易实现的Python性能优化小tips。&lt;/p&gt;
&lt;p&gt;部分参考：&lt;a href=&quot;https://segmentfault.com/a/1190000000666603&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000000666603&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些tips在刷题过程确实得到验证，尚有一些未验证但在实际简单测试中效率有提升。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="刷题" scheme="http://yoursite.com/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>%time,%timeit魔法命令</title>
    <link href="http://yoursite.com/2019/03/04/jupyter_timeit/"/>
    <id>http://yoursite.com/2019/03/04/jupyter_timeit/</id>
    <published>2019-03-04T13:30:50.000Z</published>
    <updated>2019-03-04T14:27:33.483Z</updated>
    
    <content type="html"><![CDATA[<p>在Jupyter-notebook中有几个用于计时的魔法命令<code>%time</code>、<code>%%time</code>、<code>%timeit</code>、<code>%%timeit</code>，可以非常简单的获取部分代码的运行耗时。</p><blockquote><p>所有以<code>%</code>开头的方法，都是所谓的魔法命令（Magic function），也就是IPython内置的一些方法。魔法方法要区分<code>%</code>和<code>%%</code>，以<code>%</code>开头的叫做<code>line magic</code>，是专门针对一行的命令，以<code>%%</code>开头的叫做<code>cell magic</code>，是针对多行（一个cell）的命令。</p><p><strong>以<code>%%</code>开头的魔法命令，必须放在一个cell的第一行，并且统计该cell中剩余的所有代码。</strong><br><a id="more"></a><br>分别来看：</p></blockquote><ul><li><p><code>%time</code></p><p>给出<strong>当前行的代码运行一次</strong>所花费的时间；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">%time a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># CPU times: user 2 µs, sys: 1 µs, total: 3 µs</span></span><br><span class="line"><span class="comment"># Wall time: 5.01 µs</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>user：表示执行用户代码（内核外）消耗的CPU时间；</li><li>sys：表示进程在内核中消耗的CPU时间；</li></ul><p>所以，CPU总耗时看<code>total</code>即可，也就是<code>uset</code>和<code>sys</code>之和。</p><p><code>Wall time</code>是最终总耗时，包括IO、排队的耗时，也就是感知到的总耗时。</p><blockquote><p>Wall time $&lt;$ CPU 表明进程是计算密集型（CPU bound），利用多核处理器的并行执行优势；</p><p>Wall time $\approx$ CPU 表明进程是计算密集型，未并行执行；</p><p>Wall time $&gt;​$ CPU 表明进程是I/O密集型（I/O bound），多核并行执行优势并不明显；</p></blockquote></li><li><p><code>%%time</code></p><p>给出<strong>当前cell的代码运行一次</strong>所花费的时间；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># CPU times: user 2 µs, sys: 1e+03 ns, total: 3 µs</span></span><br><span class="line"><span class="comment"># Wall time: 5.96 µs</span></span><br></pre></td></tr></table></figure></li><li><p><code>%timeit -n 1000</code></p><p>给出<strong>当前行的代码运行n次</strong>所花费的时间（取最快三次的平均用时）；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%timeit -n <span class="number">10000</span> c = pow(<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 198 ns per loop</span></span><br></pre></td></tr></table></figure></li><li><p><code>%%timeit -n 1000</code></p><p>给出<strong>当前cell的代码运行n次</strong>所花费的时间（取最快三次的平均用时）；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10000</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">c=a</span><br><span class="line">a=b</span><br><span class="line">b=c</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 68.5 ns per loop</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Jupyter-notebook中有几个用于计时的魔法命令&lt;code&gt;%time&lt;/code&gt;、&lt;code&gt;%%time&lt;/code&gt;、&lt;code&gt;%timeit&lt;/code&gt;、&lt;code&gt;%%timeit&lt;/code&gt;，可以非常简单的获取部分代码的运行耗时。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有以&lt;code&gt;%&lt;/code&gt;开头的方法，都是所谓的魔法命令（Magic function），也就是IPython内置的一些方法。魔法方法要区分&lt;code&gt;%&lt;/code&gt;和&lt;code&gt;%%&lt;/code&gt;，以&lt;code&gt;%&lt;/code&gt;开头的叫做&lt;code&gt;line magic&lt;/code&gt;，是专门针对一行的命令，以&lt;code&gt;%%&lt;/code&gt;开头的叫做&lt;code&gt;cell magic&lt;/code&gt;，是针对多行（一个cell）的命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以&lt;code&gt;%%&lt;/code&gt;开头的魔法命令，必须放在一个cell的第一行，并且统计该cell中剩余的所有代码。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="计时" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】599、两个列表的最小索引总和</title>
    <link href="http://yoursite.com/2019/03/04/leetcode_599/"/>
    <id>http://yoursite.com/2019/03/04/leetcode_599/</id>
    <published>2019-03-04T13:30:50.000Z</published>
    <updated>2019-03-04T13:48:30.427Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>599、<a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">Minimum Index Sum of Two Lists</a> 两个列表的最小索引总和</p><p>难度：简单</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.</p><p>You need to help them find out their <strong>common interest</strong> with the <strong>least list index sum</strong>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.</p><a id="more"></a></li><li><p>中文：</p><p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]</span><br><span class="line">[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]</span><br><span class="line">Output: [&quot;Shogun&quot;]</span><br><span class="line">Explanation: The only restaurant they both like is &quot;Shogun&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]</span><br><span class="line">[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]</span><br><span class="line">Output: [&quot;Shogun&quot;]</span><br><span class="line">Explanation: The restaurant they both like and have the least index sum is &quot;Shogun&quot; with index sum 1 (0+1).</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>The length of both lists will be in the range of [1, 1000].</li><li>The length of strings in both lists will be in the range of [1, 30].</li><li>The index is starting from 0 to the list length minus 1.</li><li>No duplicates in both lists.</li></ol><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><blockquote><p>Python2，用时128ms，内存11.1M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRestaurant</span><span class="params">(self, list1, list2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type list1: List[str]</span></span><br><span class="line"><span class="string">        :type list2: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dict1 = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">            dict1[name] = index</span><br><span class="line">        </span><br><span class="line">        templist = []</span><br><span class="line">        tempsum = <span class="number">3000</span></span><br><span class="line">        <span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(list2):</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> dict1:</span><br><span class="line">                cursum = index+dict1[name]</span><br><span class="line">                <span class="keyword">if</span> cursum &lt; tempsum:</span><br><span class="line">                    templist = [name]</span><br><span class="line">                    tempsum = cursum</span><br><span class="line">                <span class="keyword">elif</span> cursum == tempsum:</span><br><span class="line">                    templist.append(name)</span><br><span class="line">        <span class="keyword">return</span> templist</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Python查找dict的key时，应使用<code>if key in dict</code>，而不是<code>if key in dict.keys()</code>。</p><p>前者是在dict中查找，dict对象的存储结构是hash表，最优情况下查询复杂度为O(1)；</p><p>后者等于是在list中查找，list对象的存储结构是线性表，查询复杂度为O(n)。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;599、&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minimum Index Sum of Two Lists&lt;/a&gt; 两个列表的最小索引总和&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.&lt;/p&gt;
&lt;p&gt;You need to help them find out their &lt;strong&gt;common interest&lt;/strong&gt; with the &lt;strong&gt;least list index sum&lt;/strong&gt;. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>HMM和Viterbi算法</title>
    <link href="http://yoursite.com/2019/03/01/HMM_IM/"/>
    <id>http://yoursite.com/2019/03/01/HMM_IM/</id>
    <published>2019-03-01T12:13:59.000Z</published>
    <updated>2019-03-04T14:27:33.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>试图实现一个基于隐马尔科夫模型的拼音输入法，根据用户输入的拼音序列转换为对应的汉字，完成中文的输入。</p><h3 id="输入法基本需求"><a href="#输入法基本需求" class="headerlink" title="输入法基本需求"></a>输入法基本需求</h3><ul><li>通常一个拼音会对应多个汉字，如何确定在当前状态下，输入的拼音对应哪个汉字；</li><li>拼音序列通常可以对应多种可能的汉字组合，如何确定哪一种组合是相对最好的一种组合，如对于拼音序列<code>yi chang</code>，有<code>异常、一场、宜昌</code>等多种汉字组合，如何进行选择；<a id="more"></a><h2 id="HMM简介"><a href="#HMM简介" class="headerlink" title="HMM简介"></a>HMM简介</h2></li></ul><h3 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h3><p>HMM（Hidden Markov Models，隐马尔科夫模型）是一种基本的统计模型，可以应用在语音识别、自然语言处理、模式识别等很多领域。</p><p>HMM的一个前提是<strong>马尔科夫假设，即假设模型的当前状态仅依赖于前面的几个状态</strong>。马尔科夫假设极大的简化了问题，但也可能丢失一些重要信息。一个马尔科夫过程是指状态间的转移仅依赖于前<em>n</em>个状态的过程，该过程即为<strong><em>n</em>阶马尔科夫模型</strong>，其中<em>n</em>是影响下一个状态选择的前<em>n</em>个状态。（通常所说的HMM，指一阶HMM）</p><p>HMM是在一个标准的马尔科夫过程中引入一组隐藏状态，以及观察状态与隐藏状态之间的一些概率关系，描述了一个含有隐藏状态的马尔科夫过程。</p><p>使用HMM模型时，通常问题有以下两个主要特征：</p><ol><li>问题是基于序列的，如时间序列、状态序列；</li><li>问题中有两类数据，一类数据序列是可以观测到的，即观察序列，另一类数据序列是不能观测到的，即隐藏状态序列，简称状态序列；</li></ol><p>例如在打算要做拼音输入法任务中，可以将拼音看做是隐藏状态，而拼音转化的文字结果作为一系列的观察状态，可以看到，引入隐藏状态的同时，观察序列与隐藏过程也具有一定的概率关系。</p><p><img src="/2019/03/01/HMM_IM/HMM.jpg" style="zoom:60%"></p><p>可以参考上图，其中$Z_i​$为隐藏状态序列，$X_i​$为隐藏状态生成的观察状态序列。隐藏状态序列$Z_i​$满足马尔科夫过程的要求，且观察状态序列$X_i​$与$Z_i​$之间存在概率关系，即模型中的$X_i​$与$X_i+1​$是存在关联的。</p><h3 id="模型参数"><a href="#模型参数" class="headerlink" title="模型参数"></a>模型参数</h3><p>首先定义一些基本符号：</p><ul><li>$Q=\lbrace q_1,q_2,…,q_N \rbrace$，Q是所有可能的隐藏状态集合，其中N为可能的隐藏状态数，对应所有可能的汉字的状态数量；</li><li>$V=\lbrace v_1,v_2,…,v_M \rbrace$，V是所有可能的观察状态集合，其中M为可能的观察状态数，对应所有可能的拼音的状态数量；</li><li>$I=\lbrace i_1,i_2,…,i_T \rbrace​$，I 是长度为T的隐藏状态序列，对应用户输入的拼音序列所对应的汉字序列；</li><li>$O=\lbrace o_1,o_2,…o_T \rbrace​$，O 是对应的观察序列，对应用户输入的拼音序列；</li></ul><p>HMM除上述状态集合外，还包括三组概率集合，用一个三元组$\lambda​$来刻画HMM，可写作<strong>$\lambda = (A,B,\pi)​$</strong>。</p><ul><li><p><strong>A 是隐藏状态转移概率分布</strong>，通常用矩阵表示，称为状态转移矩阵：</p><script type="math/tex; mode=display">A=[a_{ij}]_{N\times N} \quad where\quad a_{ij}=P(i_{t+1}=q_j|i_t=q_i)</script><p>即，$a_{ij}​$ 是在时刻 <em>t</em>  处于状态 $q_i​$ 的条件下，在时刻 $t+1​$ 转移到状态 $q_j​$ 的概率，对应汉字到汉字之间的转移概率；</p></li><li><p><strong>B 是观察状态发射概率分布</strong>，通常用矩阵表示，称为混淆矩阵或发射矩阵：</p><script type="math/tex; mode=display">B=[b_{ik}]_{N\times M} \quad where\quad b_{ik}=P(o_t=v_k|i_t=q_i)</script><p>即，$b_{ik}​$ 是在时刻 <em>t</em> 下的隐藏状态 $q_i​$ 到观察状态 $v_k​$ 的发射概率，对应汉字到拼音之间的发射概率；</p></li><li><p><strong>π 是初始状态概率</strong>，用向量表示：</p><script type="math/tex; mode=display">\pi = (\pi_i)_N \quad where \quad \pi=P(i_1=q_i)</script><p>即，$\pi_i​$ 是在时刻 <em>t=1</em> 时处于隐藏状态 $q_i​$ 的概率；</p></li></ul><p>可以看到，HMM（一阶）有两个基本假设：</p><ol><li><p>齐次假设：</p><script type="math/tex; mode=display">P(i_t|i_{t-1},o_{t-1},i_{t-2},o_{t-2},...,i_1,o_1)=P(i_t|i_{t-1})</script><p>即，任意时刻的隐藏状态只依赖于它前一个时刻的隐藏状态；</p></li><li><p>观测独立性假设：</p><script type="math/tex; mode=display">P(o_t|i_{T-1},o_{T-1},i_{T-2},o_{T-2},...i_1,o_1)=P(o_t|i_t)</script><p>即，任意时刻的观察状态只依赖于当前时刻的隐藏状态；</p></li></ol><h3 id="用HMM解决的三类基本问题"><a href="#用HMM解决的三类基本问题" class="headerlink" title="用HMM解决的三类基本问题"></a>用HMM解决的三类基本问题</h3><p>一旦一个系统可以作为HMM被描述，则可以用来解决三个基本问题<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup>。其中前两个是模式识别的问题：给定HMM求一个观察序列的概率（评估），搜索最有可能生成一个观察序列的隐藏状态序列（解码）。第三个问题是给定观察序列生成一个HMM（学习）。</p><ul><li><p>评估（概率计算问题）：前向算法——动态规划</p><p>给定模型$\lambda = (A,B,\pi)​$和观察序列$O=\lbrace o_1,o_2,…o_T \rbrace​$，计算在模型 $ \lambda ​$ 参数已知的情况下，计算观察序列 $O​$ 出现的概率 $P(O|\lambda)​$；</p></li><li><p>学习（模型学习问题）：前向-后向算法（也叫Baum-Welch算法）——EM</p><p>已知观察序列$O=\lbrace o_1,o_2,…o_T \rbrace​$，学习使得观察序列概率 $P(O|\lambda)​$最大的模型$\lambda = (A,B,\pi)​$参数；</p><p>即根据观察序列用极大似然估计的方法估计参数生成隐马尔科夫模型；</p></li><li><p>解码（预测问题）：Viterbi算法——动态规划</p><p>已知模型$\lambda = (A,B,\pi)$和观察序列$O=\lbrace o_1,o_2,…o_T \rbrace$，求给定观察序列的情况下条件概率$P(I|O,\lambda)$最大的（隐藏）状态序列$I=\lbrace i_1,i_2,…,i_T \rbrace$；</p><p>即给定观察序列，搜索最有可能的对应的隐藏状态序列；</p></li></ul><h2 id="Viterbi算法"><a href="#Viterbi算法" class="headerlink" title="Viterbi算法"></a>Viterbi算法</h2><p>基于以上可知，拼音输入法的问题，属于解码问题，即已知模型和观察序列，求最有可能的对应的隐藏状态序列。</p><p>理论上，可以通过枚举所有的状态转移序列来求解解码问题，但效率非常低，暴力枚举的思路是枚举所有的长度T的状态序列，计算该状态序列与观察序列的联合概率。在状态种类为$N$的情况下，共有$N^T$种排列组合，每种组合计算联合概率的计算量为$T$，则总的计算复杂度为$O(TN^T)$ ，可见该方法并不可取。</p><p>因此常用维特比（Viterbi）算法来解决。</p><p><strong>Viterbi算法是一个通用的求序列最短路径的动态规划算法。</strong></p><p><img src="/2019/03/01/HMM_IM/Viterbi_animated_demo.gif" alt></p><p>如上图所示，Viterbi算法简单来说就是：从开始状态之后每走一步，就记录下到达该时刻每个状态时，对应该状态所有路径中的概率最大值，并且以这个最大值为基准继续向后前进。显然，如果这个最大值都不能使该状态成为最大似然估计路径上的节点的话，那么该节点的其他更小的概率值（包括对应的路径）就更不可能了。</p><p>Viterbi算法通过一种有效的方法来分析HMM模型的观察序列，并捕获最可能的隐藏序列，利用递归的方法减少计算量，并且对于观察序列的整个上下文都进行了很好的考虑，对包含噪音的序列也能进行良好的分析。</p><h3 id="Viterbi算法详细过程"><a href="#Viterbi算法详细过程" class="headerlink" title="Viterbi算法详细过程"></a>Viterbi算法详细过程</h3><blockquote><p>该部分内容主要参考<a href="www.52nlp.cn">52nlp</a>上关于HMM的详细讲解，整理一遍便于自己详细理解。</p></blockquote><p>如上文所说，通过暴力枚举的方法来找到最可能的序列的代价是非常昂贵的，因此Viterbi算法考虑用<strong>递归</strong>的方式来寻找最有可能的隐藏状态序列。所以，我们首先定义局部概率 $\delta​$ ，表示到达网格中的某个中间状态时的概率值，之后来详细了解如何在$t=1​$和$t=n (n&gt;1)​$时如何计算其局部概率值。</p><h4 id="定义局部概率和局部最佳路径"><a href="#定义局部概率和局部最佳路径" class="headerlink" title="定义局部概率和局部最佳路径"></a>定义局部概率和局部最佳路径</h4><p><img src="/2019/03/01/HMM_IM/wangge.png" style="zoom:50%"></p><p> 观察上图的网格，显示的是汉字对于观察序列（拼音序列）的一阶转移情况。对于网格中的每一个中间及终止状态，都有一个可以到达该状态的最可能路径。比如，在$t=3​$时刻的三个状态中，每一个都有一条到达该状态的最可能路径，可能如下图所示：</p><p><img src="/2019/03/01/HMM_IM/paths.gif"></p><p>这些路径即为局部最佳路径，而每条局部最佳路径的概率值即为局部概率$\delta​$，用$ \delta(i,t)​$表示在 $t​$ 时刻到达状态 $i​$ 的所有路径概率中最大的概率值，局部最佳路径即对应该最大概率值的隐藏状态序列。基于此可知，在 $t=T​$ 时刻，每个状态都有一个局部概率及相应的局部最佳路径，因此，可以通过选择该时刻局部概率值最大的状态（及其对应的最佳路径）来确定全局最佳路径，即全局最佳隐藏状态序列。</p><h4 id="计算-t-1-时刻的局部概率"><a href="#计算-t-1-时刻的局部概率" class="headerlink" title="计算$t=1$时刻的局部概率"></a>计算$t=1$时刻的局部概率</h4><p>局部概率指到达该状态时的最佳路径的概率值，当$t=1​$时，该路径是不存在的，因此，用$t=1​$时刻所处状态的初始概率值及相应观察状态的转移概率值来计算$t=1​$时的局部概率，即：</p><script type="math/tex; mode=display">\delta _1(i)=\pi (i)b_{io_1}</script><h4 id="计算-t-gt-1-时刻的局部概率"><a href="#计算-t-gt-1-时刻的局部概率" class="headerlink" title="计算$t&gt;1$时刻的局部概率"></a>计算$t&gt;1$时刻的局部概率</h4><p>考虑如图所示的网格：</p><p><img src="/2019/03/01/HMM_IM/abcxtrellis.gif"></p><p>计算 $t$ 时刻到达状态 $X$ 的最佳路径，显然，这条最佳路径一定会通过 $t-1$ 时刻的状态 $A$、$B$、$C$ 之中的某一个。也就是说，到达状态 $X$ 的最佳路径一定是路径<code>(状态序列），...，A，X</code>、<code>（状态序列），...，B，X</code>、<code>（状态序列），...，C，X</code>三条之中的一条。</p><p>我们知道在一阶马尔科夫假设下，状态 $X$ 在一个状态序列之后发生的概率只取决于之前的一个状态，也就是说，路径末端是 $AX$ 的最佳路径将是到达 $A$ 的最佳路径再紧跟 $X$ ，那么这条路径的概率即为：$P(到达状态A的最佳路径)\times P(X|A)\times P(观察状态|X)$。</p><p>由此可知，到达状态 $X$ 的最佳路径概率计算方式为：</p><script type="math/tex; mode=display">P(X\ at\ time\ t)=\max_{i=A,B,C}P(i\ at\ time\ (t-1))\times P(X|i)\times P(obs\ at\ time\ t|X)</script><p>其中，$P(i at time (t-1))​$是$t-1​$时刻的局部概率$\delta​$，$P(X|i)​$是状态转移概率（隐藏状态到观察状态的发射概率），$P(obs at time t|X)​$是观察概率。</p><p>对上述公式进行泛化可知，在 $t​$ 时刻，观察状态是 $k_t​$ ，到达隐藏状态 $i​$ 最佳局部路径概率为：</p><script type="math/tex; mode=display">\delta _t(i)=\max \limits_j(\delta _{t-1}(j)\times a_{ji}\times b_{io_t})</script><p>我们假设前一个状态的局部概率已知，同时利用状态转移概率和对应的观察概率，就可以从中选择当前状态的最大概率了（局部概率 $\delta$ ）。</p><h4 id="使用反向指针记录最佳路径"><a href="#使用反向指针记录最佳路径" class="headerlink" title="使用反向指针记录最佳路径"></a>使用反向指针记录最佳路径</h4><p><img src="/2019/03/01/HMM_IM/wangge.png" style="zoom:50%"></p><p>考虑上图的网格，经过前面的过程我们已经得到了每个状态的局部概率，但我们最终的目标是希望得到网格中的最佳隐藏序列，也就是说，最终的目标是需要得到网格中的局部最佳路径。</p><p>回顾之前我们得到局部概率的过程，$t$ 时刻的局部概率是通过 $t-1$ 时刻的局部概率得到的，也就是说，在计算得到 $t$ 时刻的局部概率 $\delta _t(i)$ 之后，我们就可以知道这个局部概率 $\delta _t(i)$ 是由 $t-1$ 时刻的哪一个状态而得到的。因此，在这个过程中，我们通过给每一个状态赋予一个反向指针 $\psi$ 来记录，这个指针指向导致当前状态最优概率的前一时刻的某个状态。</p><p>反向指针在形式上的公式如下：</p><script type="math/tex; mode=display">\psi _t(i)=argmax_j(\delta _{t-1}(j)a_{ji})</script><p>这个反向指针的表达式是通过转移概率（某时刻的隐藏状态，演变到下一时刻某个隐藏状态的概率）以及前一时刻的局部概率计算得到的，没有使用到观察概率（隐藏状态到观察状态的发射概率）。</p><p>经过上述过程，已经可以通过递归的方式得到网格中每个状态的最佳局部概率，以及相应的局部最佳路径。</p><p>在使用Viterbi算法的过程中，我们对于网格中的每一个状态都计算一个局部概率，同时包含一个反向指针来指向最可能到达该状态的路径。当完成整个计算过程之后，我们首先在终止状态找到最可能的状态，之后通过反向指针回溯到初始时刻，从而回溯路径对应的状态序列就是我们最终得到的最佳的隐藏状态序列了。</p><h3 id="Viterbi算法形式化表达及计算流程"><a href="#Viterbi算法形式化表达及计算流程" class="headerlink" title="Viterbi算法形式化表达及计算流程"></a>Viterbi算法形式化表达及计算流程</h3><p>上文对Viterbi算法的流程做了详细的梳理，现在来总结一下Viterbi算法的形式化定义及完整流程：</p><ul><li><p>输入：HMM模型 $\lambda =(A,B,\pi)$ ，观察序列 $O=(o_1,o_2,…o_T)$ ；</p></li><li><p>输出：最有可能的隐藏状态序列 $I^*=\lbrace i_1^*,i_2^*,…i_T^*\rbrace$ ；</p></li><li><p>算法流程：</p><ul><li><p><strong>初始化局部状态（$t=1$）</strong>：</p><script type="math/tex; mode=display">\delta _1(i)=\pi _ib_{io_1}\ ,\ i=1,2,...N</script><script type="math/tex; mode=display">\psi _1(i)=0\ ,\ i=1,2,...N</script><p>其中， $N​$ 表示隐藏状态的长度，在拼音转汉字的过程中对应汉字的长度。</p><p>这一步通过观察状态的初始概率，和对应的观察状态到隐藏状态的发射概率，得到初始时刻的局部概率。</p></li><li><p><strong>递推，通过动态规划递推时刻 $t=2,3,…T$ 时刻的局部状态（$t&gt;1$）</strong>：</p><script type="math/tex; mode=display">\delta _t(i)=\max_{1\leq j\leq N}[\delta _{t-1}(j)a_{ji}]b_{io_t}\ ,\ i=1,2,...N</script><script type="math/tex; mode=display">\psi _t(i)=\arg\max _{1\leq j\leq N}[\delta _{t-1}(j)a_{ji}]\ ,\ i=1,2,...N</script><p>其中，$i$ 表示当前时刻隐藏序列的各个状态，$j$ 表示前一时刻隐藏序列的各个状态。</p><p>当前状态节点的选取，是通过考虑所有的转移概率，包括当前的发射概率，以及前一时刻的局部概率，综合计算，最后记录最大值，同时也记录了最大概率对应的前一时刻的状态节点。</p></li><li><p><strong>终止</strong>：</p><script type="math/tex; mode=display">P^*=\max _{1\leq i\leq N}\delta _T(i)</script><script type="math/tex; mode=display">i_T^*=\arg \max _{1\leq i\leq N}[\delta _T(i)]</script><p>计算终止时刻 <em>T</em> 时刻最大的概率值$\delta _T(i)$，即为最佳隐藏状态序列出现的概率，计算终止时刻 <em>T</em> 时刻最大的$\psi _t(i)$，即为最佳的隐藏状态。</p></li><li><p><strong>回溯最优路径</strong>，对$t=T-1,T-2,…,1$：</p><script type="math/tex; mode=display">i_t^*=\psi _{t+1}(i_{t+1}^*)</script><p>按照此过程回溯整个网格，回溯完成时，就得到了生成给定观察序列的最可能的隐藏状态序列 $I^*=(i_1^*,i_2^*,…i_T^*)$。</p></li></ul></li></ul><h3 id="Viterbi算法代码实现"><a href="#Viterbi算法代码实现" class="headerlink" title="Viterbi算法代码实现"></a>Viterbi算法代码实现</h3><h4 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h4><blockquote><p>主要参考umdhmm代码实现。</p></blockquote><p>HMM模型结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> N;<span class="comment">/* number of hidden states;  Q=&#123;1,2,...,N&#125; */</span></span><br><span class="line"><span class="keyword">int</span> M; <span class="comment">/* number of observation symbols; V=&#123;1,2,...,M&#125;*/</span></span><br><span class="line"><span class="keyword">double</span>**A;<span class="comment">/* A[1..N][1..N]. a[i][j] is the transition prob</span></span><br><span class="line"><span class="comment">   of going from state i at time t to state j</span></span><br><span class="line"><span class="comment">   at time t+1 */</span></span><br><span class="line"><span class="keyword">double</span>**B;<span class="comment">/* B[1..N][1..M]. b[j][k] is the probability of</span></span><br><span class="line"><span class="comment">   of observing symbol k in state j */</span></span><br><span class="line"><span class="keyword">double</span>*pi;<span class="comment">/* pi[1..N] pi[i] is the initial state distribution. */</span></span><br><span class="line">&#125; HMM;</span><br></pre></td></tr></table></figure><p>Viterbi算法主流程实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Viterbi</span><span class="params">(HMM *phmm, <span class="keyword">int</span> T, <span class="keyword">int</span> *O, <span class="keyword">double</span> **delta, <span class="keyword">int</span> **psi, </span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">int</span> *q, <span class="keyword">double</span> *pprob)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;<span class="comment">/* state indices */</span></span><br><span class="line"><span class="keyword">int</span>  t;<span class="comment">/* time index */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>maxvalind;</span><br><span class="line"><span class="keyword">double</span>maxval, val;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. Initialization  */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= phmm-&gt;N; i++) &#123;</span><br><span class="line">delta[<span class="number">1</span>][i] = phmm-&gt;pi[i] * (phmm-&gt;B[i][O[<span class="number">1</span>]]);</span><br><span class="line">psi[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. Recursion */</span></span><br><span class="line"><span class="keyword">for</span> (t = <span class="number">2</span>; t &lt;= T; t++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= phmm-&gt;N; j++) &#123;</span><br><span class="line">maxval = <span class="number">0.0</span>;</span><br><span class="line">maxvalind = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= phmm-&gt;N; i++) &#123;</span><br><span class="line">val = delta[t<span class="number">-1</span>][i]*(phmm-&gt;A[i][j]);</span><br><span class="line"><span class="keyword">if</span> (val &gt; maxval) &#123;</span><br><span class="line">maxval = val;</span><br><span class="line">maxvalind = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delta[t][j] = maxval*(phmm-&gt;B[j][O[t]]);</span><br><span class="line">psi[t][j] = maxvalind; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. Termination */</span></span><br><span class="line">*pprob = <span class="number">0.0</span>;</span><br><span class="line">q[T] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= phmm-&gt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta[T][i] &gt; *pprob) &#123;</span><br><span class="line">*pprob = delta[T][i];</span><br><span class="line">q[T] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. Path (state sequence) backtracking */</span></span><br><span class="line"><span class="keyword">for</span> (t = T - <span class="number">1</span>; t &gt;= <span class="number">1</span>; t--)</span><br><span class="line">q[t] = psi[t+<span class="number">1</span>][q[t+<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于HMM实现拼音输入法主流程"><a href="#基于HMM实现拼音输入法主流程" class="headerlink" title="基于HMM实现拼音输入法主流程"></a>基于HMM实现拼音输入法主流程</h2><p>在拼音输入法的主要过程中，HMM模型可以通过以下过程得到：</p><ul><li>对训练数据的所有内容按照单字分词，并统计每个词出现的频率，以此作为初始概率 $\pi​$ ;</li><li>将训练数据的所有汉字都转换成对应的拼音，统计每个拼音对应的汉字以及各自出现的频率，以此作为发射概率 $B​$ ;</li><li>统计训练数据中每个汉字后面出现的汉字的频率，以此作为隐藏状态的转移概率 $A$ ;</li></ul><p>经过上述过程，即可得到一个隐马尔科夫模型 $\lambda(\pi,A,B)$ 。</p><p>在此基础上，使用Viterbi算法，对用户输入的拼音序列进行解码，即可得到最终的汉字序列。</p><p>在实际应用过程中，对于一些转移概率为0的情况，可以默认设置一个较小的转移概率来避免计算结果为0的情况；同时，对于未登录词，也可以通过设置较小的初始概率来解决概率为0的问题。</p><blockquote id="fn_ 1"><sup> 1</sup>. <a href="http://www.52nlp.cn/hmm-learn-best-practices-four-hidden-markov-models" target="_blank" rel="noopener">http://www.52nlp.cn/hmm-learn-best-practices-four-hidden-markov-models</a><a href="#reffn_ 1" title="Jump back to footnote [ 1] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;试图实现一个基于隐马尔科夫模型的拼音输入法，根据用户输入的拼音序列转换为对应的汉字，完成中文的输入。&lt;/p&gt;
&lt;h3 id=&quot;输入法基本需求&quot;&gt;&lt;a href=&quot;#输入法基本需求&quot; class=&quot;headerlink&quot; title=&quot;输入法基本需求&quot;&gt;&lt;/a&gt;输入法基本需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通常一个拼音会对应多个汉字，如何确定在当前状态下，输入的拼音对应哪个汉字；&lt;/li&gt;
&lt;li&gt;拼音序列通常可以对应多种可能的汉字组合，如何确定哪一种组合是相对最好的一种组合，如对于拼音序列&lt;code&gt;yi chang&lt;/code&gt;，有&lt;code&gt;异常、一场、宜昌&lt;/code&gt;等多种汉字组合，如何进行选择；&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="HMM" scheme="http://yoursite.com/tags/HMM/"/>
    
      <category term="隐马" scheme="http://yoursite.com/tags/%E9%9A%90%E9%A9%AC/"/>
    
      <category term="Viterbi" scheme="http://yoursite.com/tags/Viterbi/"/>
    
      <category term="拼音输入法" scheme="http://yoursite.com/tags/%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>My Real Hello World</title>
    <link href="http://yoursite.com/2019/02/27/myHello/"/>
    <id>http://yoursite.com/2019/02/27/myHello/</id>
    <published>2019-02-27T15:13:59.000Z</published>
    <updated>2019-03-04T14:31:58.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/02/27/myHello/bengchuang.GIF" alt="bengchuang"></p><blockquote class="blockquote-center"><p>This is my real hello world from hexo.</p><p>**Lesley Shi**</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/02/27/myHello/bengchuang.GIF&quot; alt=&quot;bengchuang&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;
&lt;p&gt;This is my real hello world
      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/27/hello-world/"/>
    <id>http://yoursite.com/2019/02/27/hello-world/</id>
    <published>2019-02-27T12:13:59.000Z</published>
    <updated>2019-03-04T14:29:42.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
