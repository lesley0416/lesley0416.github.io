<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lesley&#39;s 博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lesley0416.github.io/"/>
  <updated>2019-03-13T15:21:50.362Z</updated>
  <id>https://lesley0416.github.io/</id>
  
  <author>
    <name>Lesley Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【LeetCode】53、最大子序和</title>
    <link href="https://lesley0416.github.io/2019/03/13/leetcode_53/"/>
    <id>https://lesley0416.github.io/2019/03/13/leetcode_53/</id>
    <published>2019-03-13T13:30:50.000Z</published>
    <updated>2019-03-13T15:21:50.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>53、<a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">Maximum Subarray</a>最大子序和</p><p>难度：简单</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p></li><li><p>中文：</p><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><a id="more"></a></li><li><p>示例</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure></li><li><p>进阶</p><p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>遍历数组，用<code>curSum</code>维护当前位置累加的和，当<code>curSum&lt;0</code>时，将其置为0，重新开始累加，每次都更新全局最大值。</p><p>顺序遍历整个数组，当遍历到第<code>i</code>个值时，有两种情况：</p><ol><li><p>之前遍历过程中的<code>curSum</code>始终大于0，假设当前子序列为<code>a,a+1,a+2,...,b-2,b-1,b</code>，此时考虑所有可能：</p><ul><li>以当前子序列开头为开头，以中间任一处结尾的序列，如<code>a,a+1,a+2,...b-2</code>：这种情况一致在遍历过程中保存更新；</li><li>以当前子序列结尾为结尾，以中间任一处开头的序列，如<code>a+2,...,b-2,b-1,b</code>：这种情况一定小于当前的完整子序列的和，因为前面缺失的部分的和一定是大于0的（讨论的前提就是遍历过程加和始终大于0）；</li><li>以中间元素为开头和结尾的序列，如<code>a+2,...,b-2</code>：这种情况，首先按照前一条讨论，补全前面缺失的部分，之后就变成了第一条讨论的情况；</li></ul><p>也就是说，<code>i</code>前面的所有可能序列情况都已经考虑到了；</p></li><li><p><code>curSum</code>出现小于0的情况，此时由于已遍历过的连续子序列加和<code>&lt;0</code>，则遍历过的这个连续子序列不能完整的被包含到新形成的序列中了；而是否要全部放弃，还是保留末尾的部分元素？参考之前的讨论，以当前子序列结尾为结尾，以中间任一处开头的序列的加和是小于完整子序列的，也就是说是<code>&lt;0</code>的，因为此时遍历过的连续子序列需要全部放弃，即<code>curSum</code>置0，并重新开始累加。</p></li></ol><p>其中，每次<code>curSum&lt;0</code>时的下一位置即为和最大的子序列的开始，每次<code>curSum&gt;maxSum</code>时的位置即为和最大的子序列的结尾。</p><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python3，用时96ms，内存13.6M</p><p>时间复杂度：$O (n) $</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        maxSum = nums[<span class="number">0</span>]</span><br><span class="line">        curSum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            curSum += nums[i]</span><br><span class="line">            maxSum = max(maxSum, curSum)</span><br><span class="line">            <span class="keyword">if</span> curSum &lt; <span class="number">0</span>:</span><br><span class="line">                curSum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>动态规划，用<code>tempSum</code>保存以第<code>i</code>个元素结尾的最大连续子序列的和，假设对于元素<code>i</code>，其前面的所有元素结尾的序列和都已经得到，则以第<code>i</code>个元素结尾的子序列的和要么是以第<code>i-1</code>个元素结尾的和最大的子序列加上当前元素，要么就是当前元素本身，即<code>tempSum[i] = max(tempSum[i-1]+nums[i], nums[i])</code>。（实际等价于看以<code>i-1</code>个元素结尾的和最大的子序列的和是否小于0，等价于思路一了）当<code>i=0</code>时，最大子序列和即为<code>tempSum[0] = nums[0]</code>。</p><h4 id="代码提交-1"><a href="#代码提交-1" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python3，用时104ms，内存14.2M</p><p>时间复杂度：$O (n) ​$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        tempSum = []</span><br><span class="line">        tempSum.append(nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            tempSum.append(max(tempSum[i<span class="number">-1</span>]+nums[i], nums[i]))</span><br><span class="line">        <span class="keyword">return</span> max(tempSum)</span><br></pre></td></tr></table></figure><p>可以直接用<code>nums</code>来保存子序列最大和，能节约一点内存，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            nums[i] = max(nums[i<span class="number">-1</span>]+nums[i], nums[i])</span><br><span class="line">        <span class="keyword">return</span> max(nums)</span><br></pre></td></tr></table></figure><h3 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h3><p>提示说可以尝试用分治法，那么就将整个数组不断切分成子数组，最后选最大值返回。</p><p>用二分法切分数组，最大子序和要么在左半部分，要么在右半部分，要么横跨左右两部分（既包含左侧的最后一个元素，也包含右侧的第一个元素），返回这三种情况的最大值即可。</p><p>横跨左右两部分的情况，可以从中间位置逐次向左右两侧遍历，并更新最大值。</p><h4 id="代码提交-2"><a href="#代码提交-2" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python3，用时272ms，内存13.7M</p><p>时间复杂度：$O(n\log n)$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(nums)<span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        maxSum = self.divide(nums, left, right)</span><br><span class="line">        <span class="keyword">return</span> maxSum</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, nums, left, right)</span>:</span></span><br><span class="line">        <span class="comment"># 切分到只有一个元素时，返回</span></span><br><span class="line">        <span class="keyword">if</span> left == right:</span><br><span class="line">            <span class="keyword">return</span> nums[left]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确立中心点</span></span><br><span class="line">        center = (left + right)//<span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 子序列完全在左侧的最大和</span></span><br><span class="line">        leftMax = self.divide(nums, left, center)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 子序列完全在右侧的最大和</span></span><br><span class="line">        rightMax = self.divide(nums, center+<span class="number">1</span>, right)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 子序列横跨左右两侧的最大和</span></span><br><span class="line">        <span class="comment"># 从中间点逐次向左边界靠近</span></span><br><span class="line">        leftSum = <span class="number">0</span></span><br><span class="line">        leftBorderSum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(center<span class="number">-1</span>, left<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            leftSum += nums[i]</span><br><span class="line">            leftBorderSum = max(leftSum, leftBorderSum)</span><br><span class="line">        <span class="comment"># 从中间点逐次向右边界靠近</span></span><br><span class="line">        rightSum = <span class="number">0</span></span><br><span class="line">        rightBorderSum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(center+<span class="number">1</span>, right+<span class="number">1</span>):</span><br><span class="line">            rightSum += nums[i]</span><br><span class="line">            rightBorderSum = max(rightSum, rightBorderSum)</span><br><span class="line">        centerMax = leftBorderSum + nums[center] + rightBorderSum</span><br><span class="line">        <span class="keyword">return</span> max(leftMax, centerMax, rightMax)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;53、&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maximum Subarray&lt;/a&gt;最大子序和&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中文：&lt;/p&gt;
&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/tags/LeetCode/"/>
    
      <category term="数组" scheme="https://lesley0416.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="动态规划" scheme="https://lesley0416.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="分治算法" scheme="https://lesley0416.github.io/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】136、只出现一次的数字</title>
    <link href="https://lesley0416.github.io/2019/03/13/leetcode_136/"/>
    <id>https://lesley0416.github.io/2019/03/13/leetcode_136/</id>
    <published>2019-03-13T08:10:09.000Z</published>
    <updated>2019-03-13T15:21:33.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>136、<a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">Single Number</a>只出现一次的数字</p><p>难度：简单</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p></li><li><p>中文：</p><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><a id="more"></a><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p></li><li><p>示例</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>只有一个元素只出现一次，其余元素都出现两次，所以可以先对原数组去重并求和，再用两倍的和减去原数组的和，得到的结果就是只出现一次的元素值。</p><p>只适合<code>只有一个元素</code>次数不同的情况，且使用了额外空间。</p><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python2，用时44ms，内存12.6M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * sum(set(nums)) - sum(nums)</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>利用位运算的异或操作，<strong>任何数字异或其自身都等于零</strong>，<strong>任何数字异或零还等于其本身</strong>。</p><p>题目只有一个元素出现一次，其余元素都出现两次，出现两次的元素异或结果都为零，剩余一个出现一次的元素，与零异或后结果还是其本身，也就是说对所有元素进行异或操作后，结果即为只出现一次的那一个元素值。</p><h4 id="代码提交-1"><a href="#代码提交-1" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python2，用时44ms，内存12.2M</p><p>看提交情况，用时最短的代码也是这个思路，约24ms，所以用时可能也和其他一些系统随机因素有关系吧。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            temp ^= i</span><br><span class="line">        <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;136、&lt;a href=&quot;https://leetcode-cn.com/problems/single-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Single Number&lt;/a&gt;只出现一次的数字&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, every element appears &lt;em&gt;twice&lt;/em&gt; except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中文：&lt;/p&gt;
&lt;p&gt;给定一个&lt;strong&gt;非空&lt;/strong&gt;整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/tags/LeetCode/"/>
    
      <category term="位运算" scheme="https://lesley0416.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="哈希表" scheme="https://lesley0416.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】414、第三大的数</title>
    <link href="https://lesley0416.github.io/2019/03/13/leetcode_414/"/>
    <id>https://lesley0416.github.io/2019/03/13/leetcode_414/</id>
    <published>2019-03-13T07:30:50.000Z</published>
    <updated>2019-03-13T15:21:42.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>414、<a href="https://leetcode-cn.com/problems/third-maximum-number/" target="_blank" rel="noopener">Third Maximum Number</a>第三大的数</p><p>难度：简单</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>Given a <strong>non-empty</strong> array of integers, return the <strong>third</strong> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p></li><li><p>中文：</p><p>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</p><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3></li></ul><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [3, 2, 1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: The third maximum is 1.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [1, 2]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: The third maximum does not exist, so the maximum (2) is returned instead.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: [2, 2, 3, 1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: Note that the third maximum here means the third maximum distinct number.</span><br><span class="line">Both numbers with value 2 are both considered as second maximum.</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用三个变量分别记录数组第1、2、3大的数字，遍历一遍数组即可更新前三大的数，时间复杂度O(n)。</p><p>引申出的<strong>top-k问题</strong>，以及解决top-k问题的<strong>BFPRT算法</strong>，后续再详细记录。</p><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><blockquote><p>Python2，用时28ms，内存11.1M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">thirdMax</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        first = second = third = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> temp &gt; first:</span><br><span class="line">                first, second, third = temp, first, second</span><br><span class="line">            <span class="keyword">elif</span> first &gt; temp &gt; second:</span><br><span class="line">                second, third = temp, second</span><br><span class="line">            <span class="keyword">elif</span> second &gt; temp &gt; third:</span><br><span class="line">                third = temp</span><br><span class="line">        <span class="keyword">return</span> third <span class="keyword">if</span> third <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> first</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>None</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;414、&lt;a href=&quot;https://leetcode-cn.com/problems/third-maximum-number/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Third Maximum Number&lt;/a&gt;第三大的数&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;Given a &lt;strong&gt;non-empty&lt;/strong&gt; array of integers, return the &lt;strong&gt;third&lt;/strong&gt; maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中文：&lt;/p&gt;
&lt;p&gt;给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/tags/LeetCode/"/>
    
      <category term="数组" scheme="https://lesley0416.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Python各种排序</title>
    <link href="https://lesley0416.github.io/2019/03/13/python_lambda_sorted/"/>
    <id>https://lesley0416.github.io/2019/03/13/python_lambda_sorted/</id>
    <published>2019-03-13T07:30:10.000Z</published>
    <updated>2019-03-13T15:22:23.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0、基础"><a href="#0、基础" class="headerlink" title="0、基础"></a>0、基础</h2><blockquote><p>主要用到<code>list.sort()</code>、<code>sorted()</code>、<code>lambda</code>进行各种排序操作。</p><p>其中：<strong><code>list.sort()</code>是Python列表的一个内置排序方法，只供<code>list</code>结构使用</strong>，<code>list.sort()</code>方法排序时直接修改原列表，返回<code>None</code>。而<code>sorted()</code>函数接受一切迭代器，返回新列表。</p><p>相比<code>list.sort()</code>，<code>sorted()</code>使用范围更广，但是如果不需要保留原列表的情况下对列表排序，可以选择<code>list.sort()</code>方法，不需要复制原有列表，消耗内存小，效率也较高。</p></blockquote><a id="more"></a><h3 id="list-sort"><a href="#list-sort" class="headerlink" title="list.sort()"></a>list.sort()</h3><p><code>list.sort()</code>函数用于<strong>对原列表进行排序</strong>，如果指定参数，则使用比较函数指定的比较函数。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>参数<ul><li>cmp：可选参数，如果指定了该参数则使用该参数的方法进行排序，<strong>Python3取消了该参数</strong>；</li><li>key：用来进行比较的元素，取自可迭代对象中，指定可迭代对象中的一个元素来进行排序；</li><li>reverse：排序规则，<code>True</code>降序，<code>False</code>升序（默认）；</li></ul></li><li>返回值<ul><li>该方法直接修改原列表，返回<code>None</code>；</li></ul></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表排序</span></span><br><span class="line">test = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>]</span><br><span class="line">test.sort()</span><br><span class="line">print(test)</span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># ['Facebook', 'Google', 'Runoob', 'Taobao']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表降序排序</span></span><br><span class="line">vowels = [<span class="string">'e'</span>, <span class="string">'a'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'i'</span>]</span><br><span class="line">vowels.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (vowels)</span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># ['u', 'o', 'i', 'e', 'a']</span></span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h3><p><code>sorted()</code>函数对<strong>所有可迭代对象</strong>进行排序操作。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(iterable, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>参数<ul><li>iterable：可迭代对象；</li><li>key：用来进行比较的元素，取自可迭代对象中，指定可迭代对象中的一个元素来进行排序；</li><li>reverse：排序规则，<code>True</code>降序，<code>False</code>升序（默认）；</li></ul></li><li>返回值<ul><li>返回排序好的列表；</li></ul></li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排序</span></span><br><span class="line">sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line"><span class="comment"># result：</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序排序</span></span><br><span class="line">example_list = [<span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">sorted(example_list, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># result：</span></span><br><span class="line"><span class="comment"># [7, 6, 5, 4, 3, 2, 1, 0]</span></span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>Python使用<code>lambda</code>创建匿名函数，即不使用<code>def</code>这样的标准语句来定义函数，允许快速定义单行函数，类似于C语言的宏，可以用在任何需要函数的地方。</p><ul><li><code>lambda</code>的主体是一个表达式，而不是一个代码块，仅能在其中封装有限的逻辑；</li><li><code>lambda</code>函数拥有自己的命名空间，不能访问参数列表之外或全局命名空间里的参数；</li><li><code>lambda</code>并不会带来程序效率的提高，只是使代码更简洁？</li></ul><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><p>上述用法等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">lambda</span>&gt;<span class="params">(arg1 [,arg2,......argn])</span>:</span></span><br><span class="line"><span class="keyword">return</span> expression</span><br></pre></td></tr></table></figure><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"sum(10,20) = "</span>, sum( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"sum(20,30) = "</span>, sum( <span class="number">20</span>, <span class="number">30</span> ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># sum(10,20) = 30</span></span><br><span class="line"><span class="comment"># sum(20,30) = 50</span></span><br></pre></td></tr></table></figure><h2 id="1、各种排序"><a href="#1、各种排序" class="headerlink" title="1、各种排序"></a>1、各种排序</h2><blockquote><p><a href="https://www.polarxiong.com/archives/Python-%E4%BD%BF%E7%94%A8lambda%E5%BA%94%E5%AF%B9%E5%90%84%E7%A7%8D%E5%A4%8D%E6%9D%82%E6%83%85%E5%86%B5%E7%9A%84%E6%8E%92%E5%BA%8F-%E5%8C%85%E6%8B%AClist%E5%B5%8C%E5%A5%97dict.html" target="_blank" rel="noopener">参考链接</a></p></blockquote><h3 id="1-1、list排序"><a href="#1-1、list排序" class="headerlink" title="1.1、list排序"></a>1.1、list排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">print(sorted(lis))</span><br><span class="line"><span class="comment"># ['a', 'b', 'c']</span></span><br><span class="line">print(sorted(lis, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br><span class="line"></span><br><span class="line">lis.sort()</span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment"># ['a', 'b', 'c']</span></span><br><span class="line">lis.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br></pre></td></tr></table></figure><h3 id="1-2、dict按key排序"><a href="#1-2、dict按key排序" class="headerlink" title="1.2、dict按key排序"></a>1.2、dict按key排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(sorted(dic))</span><br><span class="line"><span class="comment"># ['a', 'b', 'c']</span></span><br><span class="line">print(sorted(dic, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br></pre></td></tr></table></figure><h3 id="1-3、dict按value排序"><a href="#1-3、dict按value排序" class="headerlink" title="1.3、dict按value排序"></a>1.3、dict按value排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">3</span>&#125;</span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k]))</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k], reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h3 id="1-4、list内嵌套list排序"><a href="#1-4、list内嵌套list排序" class="headerlink" title="1.4、list内嵌套list排序"></a>1.4、list内嵌套list排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lis = [[<span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>], [<span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>]]</span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># [[1, 5, 6], [4, 2, 9], [7, 8, 3]]</span></span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># [[4, 2, 9], [1, 5, 6], [7, 8, 3]]</span></span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># [[7, 8, 3], [1, 5, 6], [4, 2, 9]]</span></span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="number">0</span>], reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># [[7, 8, 3], [4, 2, 9], [1, 5, 6]]</span></span><br></pre></td></tr></table></figure><h3 id="1-5、dict内嵌套dict排序"><a href="#1-5、dict内嵌套dict排序" class="headerlink" title="1.5、dict内嵌套dict排序"></a>1.5、dict内嵌套dict排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">'a'</span>: &#123;<span class="string">'x'</span>: <span class="number">3</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">'b'</span>: &#123;<span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'y'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    <span class="string">'c'</span>: &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">3</span>, <span class="string">'z'</span>: <span class="number">2</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="string">'x'</span>]))</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="string">'y'</span>]))</span><br><span class="line"><span class="comment"># ['b', 'a', 'c']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="string">'z'</span>]))</span><br><span class="line"><span class="comment"># ['a', 'c', 'b']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="string">'x'</span>], reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><h3 id="1-6、list内嵌套dict排序"><a href="#1-6、list内嵌套dict排序" class="headerlink" title="1.6、list内嵌套dict排序"></a>1.6、list内嵌套dict排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lis = [</span><br><span class="line">    &#123;<span class="string">'x'</span>: <span class="number">3</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'x'</span>: <span class="number">2</span>, <span class="string">'y'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">3</span>, <span class="string">'z'</span>: <span class="number">2</span>&#125;,</span><br><span class="line">]</span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="string">'x'</span>]))</span><br><span class="line"><span class="comment"># [&#123;'z': 2, 'x': 1, 'y': 3&#125;, &#123;'z': 3, 'x': 2, 'y': 1&#125;, &#123;'z': 1, 'x': 3, 'y': 2&#125;]</span></span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="string">'y'</span>]))</span><br><span class="line"><span class="comment"># [&#123;'z': 3, 'x': 2, 'y': 1&#125;, &#123;'z': 1, 'x': 3, 'y': 2&#125;, &#123;'z': 2, 'x': 1, 'y': 3&#125;]</span></span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="string">'z'</span>]))</span><br><span class="line"><span class="comment"># [&#123;'z': 1, 'x': 3, 'y': 2&#125;, &#123;'z': 2, 'x': 1, 'y': 3&#125;, &#123;'z': 3, 'x': 2, 'y': 1&#125;]</span></span><br><span class="line">print(sorted(lis, key=<span class="keyword">lambda</span> k: k[<span class="string">'x'</span>], reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># [&#123;'z': 1, 'x': 3, 'y': 2&#125;, &#123;'z': 3, 'x': 2, 'y': 1&#125;, &#123;'z': 2, 'x': 1, 'y': 3&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="1-7、dict内嵌套list排序"><a href="#1-7、dict内嵌套list排序" class="headerlink" title="1.7、dict内嵌套list排序"></a>1.7、dict内嵌套list排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">'a'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'b'</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'c'</span>: [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">&#125;</span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># ['a', 'b', 'c']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="number">1</span>]))</span><br><span class="line"><span class="comment"># ['b', 'c', 'a']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br><span class="line">print(sorted(dic, key=<span class="keyword">lambda</span> k: dic[k][<span class="number">0</span>], reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># ['c', 'b', 'a']</span></span><br></pre></td></tr></table></figure><h3 id="1-8、按照多个参数排序"><a href="#1-8、按照多个参数排序" class="headerlink" title="1.8、按照多个参数排序"></a>1.8、按照多个参数排序</h3><p>使用<code>operator</code>模块的<code>itemgetter()</code>实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">student_tuples = [(<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),(<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),(<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (sorted(student_tuples, key = itemgetter(<span class="number">2</span>)))  <span class="comment"># 根据年龄排序</span></span><br><span class="line"><span class="keyword">print</span> (sorted(student_tuples, key = itemgetter(<span class="number">1</span>, <span class="number">2</span>)))  <span class="comment"># 根据成绩和年龄排序</span></span><br><span class="line"><span class="keyword">print</span> (sorted(student_tuples, key = itemgetter(<span class="number">1</span>, <span class="number">2</span>), reverse=<span class="literal">True</span>)) <span class="comment"># 反转排序结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</span></span><br><span class="line"><span class="comment"># [('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]</span></span><br><span class="line"><span class="comment"># [('jane', 'B', 12), ('dave', 'B', 10), ('john', 'A', 15)]</span></span><br></pre></td></tr></table></figure><h2 id="2、其他"><a href="#2、其他" class="headerlink" title="2、其他"></a>2、其他</h2><p><code>list</code>排序可视情况采用<code>sorted()</code>或<code>list.sort()</code>，其他各种排序主要是<code>sorted()</code>和<code>lambda</code>的结合操作；</p><p><code>dict</code>的排序只取其<code>key</code>，所以需要对<code>value</code>操作时需要在<code>lambda</code>中先转换为对应的<code>value</code>才可以；</p><p>排序是稳定的，即如果多个元素有相同的key，则排序前后其先后顺序不变；</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0、基础&quot;&gt;&lt;a href=&quot;#0、基础&quot; class=&quot;headerlink&quot; title=&quot;0、基础&quot;&gt;&lt;/a&gt;0、基础&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;主要用到&lt;code&gt;list.sort()&lt;/code&gt;、&lt;code&gt;sorted()&lt;/code&gt;、&lt;code&gt;lambda&lt;/code&gt;进行各种排序操作。&lt;/p&gt;
&lt;p&gt;其中：&lt;strong&gt;&lt;code&gt;list.sort()&lt;/code&gt;是Python列表的一个内置排序方法，只供&lt;code&gt;list&lt;/code&gt;结构使用&lt;/strong&gt;，&lt;code&gt;list.sort()&lt;/code&gt;方法排序时直接修改原列表，返回&lt;code&gt;None&lt;/code&gt;。而&lt;code&gt;sorted()&lt;/code&gt;函数接受一切迭代器，返回新列表。&lt;/p&gt;
&lt;p&gt;相比&lt;code&gt;list.sort()&lt;/code&gt;，&lt;code&gt;sorted()&lt;/code&gt;使用范围更广，但是如果不需要保留原列表的情况下对列表排序，可以选择&lt;code&gt;list.sort()&lt;/code&gt;方法，不需要复制原有列表，消耗内存小，效率也较高。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lesley0416.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://lesley0416.github.io/tags/Python/"/>
    
      <category term="lambda" scheme="https://lesley0416.github.io/tags/lambda/"/>
    
      <category term="排序" scheme="https://lesley0416.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="sort" scheme="https://lesley0416.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】937、重新排列日志文件</title>
    <link href="https://lesley0416.github.io/2019/03/13/leetcode_937/"/>
    <id>https://lesley0416.github.io/2019/03/13/leetcode_937/</id>
    <published>2019-03-13T06:30:00.000Z</published>
    <updated>2019-03-13T15:22:11.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>937、<a href="https://leetcode-cn.com/problems/reorder-log-files/" target="_blank" rel="noopener">Reorder Log Files</a>重新排列日志文件</p><p>难度：简单</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>You have an array of <code>logs</code>.  Each log is a space delimited string of words.</p><p>For each log, the first word in each log is an alphanumeric <em>identifier</em>.  Then, either:</p><ul><li>Each word after the identifier will consist only of lowercase letters, or;</li><li>Each word after the identifier will consist only of digits.</li></ul><p>We will call these two varieties of logs <em>letter-logs</em> and <em>digit-logs</em>.  It is guaranteed that each log has at least one word after its identifier.</p><p>Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.</p><p>Return the final order of the logs.</p><a id="more"></a></li><li><p>中文：</p><p>你有一个日志数组 <code>logs</code>。每条日志都是以空格分隔的字串。</p><p>对于每条日志，其第一个字为字母数字<em>标识符</em>。然后，要么：</p><ul><li>标识符后面的每个字将仅由小写字母组成，或；</li><li>标识符后面的每个字将仅由数字组成。</li></ul><p>我们将这两种日志分别称为字母日志和数字日志。保证每个日志在其标识符后面至少有一个字。</p><p>将日志重新排序，使得所有字母日志都排在数字日志之前。字母日志按字母顺序排序，忽略标识符，标识符仅用于表示关系。数字日志应该按原来的顺序排列。</p><p>返回日志的最终顺序。</p></li></ul><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ol><li><code>0 &lt;= logs.length &lt;= 100</code></li><li><code>3 &lt;= logs[i].length &lt;= 100</code></li><li><code>logs[i]</code> is guaranteed to have an identifier, and a word after the identifier.</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]</span><br><span class="line">Output: [&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>先区分数字日志和字母日志，然后字母日志按内容排序，最后合并两部分内容输出。</p><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python2，用时48ms，内存11.1M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderLogFiles</span><span class="params">(self, logs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type logs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        letterList = []</span><br><span class="line">        numberList = []</span><br><span class="line">        <span class="keyword">for</span> log <span class="keyword">in</span> logs:</span><br><span class="line">            logList = log.split(<span class="string">" "</span>)</span><br><span class="line">            <span class="keyword">if</span> logList[<span class="number">1</span>].isdigit():</span><br><span class="line">                numberList.append(log)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                letterList.append((logList[<span class="number">0</span>], <span class="string">" "</span>.join(logList[<span class="number">1</span>:])))</span><br><span class="line">        letterList.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">        resultList = [<span class="string">" "</span>.join(a) <span class="keyword">for</span> a <span class="keyword">in</span> letterList]</span><br><span class="line">        <span class="keyword">return</span> resultList+numberList</span><br></pre></td></tr></table></figure><p>后来看了一下用时短的代码，方法都很简单，但是代码很简洁高效。</p><p>用0、1标记字母、数字日志，之后一次排序返回。</p><blockquote><p>Python2，用时36ms，内存11.1M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderLogFiles</span><span class="params">(self, logs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type logs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(log)</span>:</span></span><br><span class="line">            id, rest = log.split(<span class="string">' '</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">0</span>, rest) <span class="keyword">if</span> rest[<span class="number">0</span>].isalpha() <span class="keyword">else</span> (<span class="number">1</span>,)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sorted(logs, key = f)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;937、&lt;a href=&quot;https://leetcode-cn.com/problems/reorder-log-files/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reorder Log Files&lt;/a&gt;重新排列日志文件&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;You have an array of &lt;code&gt;logs&lt;/code&gt;.  Each log is a space delimited string of words.&lt;/p&gt;
&lt;p&gt;For each log, the first word in each log is an alphanumeric &lt;em&gt;identifier&lt;/em&gt;.  Then, either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each word after the identifier will consist only of lowercase letters, or;&lt;/li&gt;
&lt;li&gt;Each word after the identifier will consist only of digits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will call these two varieties of logs &lt;em&gt;letter-logs&lt;/em&gt; and &lt;em&gt;digit-logs&lt;/em&gt;.  It is guaranteed that each log has at least one word after its identifier.&lt;/p&gt;
&lt;p&gt;Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.&lt;/p&gt;
&lt;p&gt;Return the final order of the logs.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/tags/LeetCode/"/>
    
      <category term="字符串" scheme="https://lesley0416.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】936、戳印序列</title>
    <link href="https://lesley0416.github.io/2019/03/12/leetcode_936/"/>
    <id>https://lesley0416.github.io/2019/03/12/leetcode_936/</id>
    <published>2019-03-12T03:20:09.000Z</published>
    <updated>2019-03-13T15:22:05.092Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>936、<a href="https://leetcode-cn.com/problems/stamping-the-sequence/" target="_blank" rel="noopener">Stamping The Sequence</a>戳印序列</p><p>难度：困难</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>You want to form a <code>target</code> string of <strong>lowercase letters</strong>.</p><p>At the beginning, your sequence is <code>target.length</code> <code>&#39;?&#39;</code> marks.  You also have a <code>stamp</code> of lowercase letters.</p><p>On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.  You can make up to <code>10 * target.length</code> turns.</p><p>For example, if the initial sequence is “?????”, and your stamp is <code>&quot;abc&quot;</code>,  then you may make “abc??”, “?abc?”, “??abc” in the first turn.  (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)</p><a id="more"></a><p>If the sequence is possible to stamp, then return an array of the index of the left-most letter being stamped at each turn.  If the sequence is not possible to stamp, return an empty array.</p><p>For example, if the sequence is “ababc”, and the stamp is <code>&quot;abc&quot;</code>, then we could return the answer <code>[0, 2]</code>, corresponding to the moves “?????” -&gt; “abc??” -&gt; “ababc”.</p><p>Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within <code>10 * target.length</code> moves.  Any answers specifying more than this number of moves will not be accepted.</p></li><li><p>中文：</p><p>你想要用<strong>小写字母</strong>组成一个目标字符串 <code>target</code>。 </p><p>开始的时候，序列由 <code>target.length</code> 个 <code>&#39;?&#39;</code> 记号组成。而你有一个小写字母印章 <code>stamp</code>。</p><p>在每个回合，你可以将印章放在序列上，并将序列中的每个字母替换为印章上的相应字母。你最多可以进行 <code>10 * target.length</code>  个回合。</p><p>举个例子，如果初始序列为 “?????”，而你的印章 <code>stamp</code> 是 <code>&quot;abc&quot;</code>，那么在第一回合，你可以得到 “abc??”、”?abc?”、”??abc”。（请注意，印章必须完全包含在序列的边界内才能盖下去。）</p><p>如果可以印出序列，那么返回一个数组，该数组由每个回合中被印下的最左边字母的索引组成。如果不能印出序列，就返回一个空数组。</p><p>例如，如果序列是 “ababc”，印章是 <code>&quot;abc&quot;</code>，那么我们就可以返回与操作 “?????” -&gt; “abc??” -&gt; “ababc” 相对应的答案 <code>[0, 2]</code>；</p><p>另外，如果可以印出序列，那么需要保证可以在 <code>10 * target.length</code> 个回合内完成。任何超过此数字的答案将不被接受。</p></li></ul><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ol><li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li><li><code>stamp</code> 和 <code>target</code> 只包含小写字母。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: stamp = &quot;abc&quot;, target = &quot;ababc&quot;</span><br><span class="line">Output: [0,2]</span><br><span class="line">([1,0,2] would also be accepted as an answer, as well as some other answers.)</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;</span><br><span class="line">Output: [3,0,1]</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>题目是从<code>?????</code>到<code>ababc</code>的问题，替换时要考虑会覆盖到已经替换好的部分。可以逆向替换，从<code>ababc</code>到<code>?????</code>，<code>?</code>可以看做通配符，遍历<code>target</code>，逐位和<code>stamp</code>比较，如果可以匹配到，则记录当时的<code>index</code>，并修改覆盖后的字符，循环上述过程，直到得到了<code>?????</code>序列或无法继续匹配下去。</p><p>例如，<code>stamp=&#39;abca&#39;</code>，<code>target=&#39;aabcaca&#39;</code>，则整个替换过程为<code>aabcaca =&gt; a????ca =&gt; ?????ca =&gt; ???????</code>，替换位置索引序列为<code>1-&gt;0-&gt;3</code>，所以题目所求的序列即为<code>[3,0,1]</code>。</p><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python2，用时6480ms，内存10.9M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movesToStamp</span><span class="params">(self, stamp, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type stamp: str</span></span><br><span class="line"><span class="string">        :type target: str</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果target首尾字符和stamp不同，则肯定无法覆盖，直接返回[]</span></span><br><span class="line">        <span class="keyword">if</span> target[<span class="number">0</span>] != stamp[<span class="number">0</span>] <span class="keyword">or</span> target[<span class="number">-1</span>] != stamp[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        slen, tlen = len(stamp), len(target)</span><br><span class="line">        temptarget = target</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否可以stamp一次，返回索引</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">checkstamp</span><span class="params">(temptarget)</span>:</span></span><br><span class="line">            <span class="comment"># 遍历target，并记录可以覆盖的位置索引index</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(tlen):</span><br><span class="line">                hasletter, stampj, tempi = <span class="literal">False</span>, <span class="number">0</span>, index</span><br><span class="line">                <span class="comment"># 遍历stamp，并对比target[index:index+len(stamp)]是否可以覆盖</span></span><br><span class="line">                <span class="keyword">while</span> stampj &lt; slen <span class="keyword">and</span> tempi &lt; tlen <span class="keyword">and</span> (temptarget[tempi] == <span class="string">"?"</span> <span class="keyword">or</span> temptarget[tempi] == stamp[stampj]):</span><br><span class="line">                    <span class="comment"># 待覆盖内容包含非“?”内容，不匹配完全由“?”组成的内容</span></span><br><span class="line">                    <span class="keyword">if</span> temptarget[tempi] == stamp[stampj]:</span><br><span class="line">                        hasletter = <span class="literal">True</span></span><br><span class="line">                    stampj += <span class="number">1</span></span><br><span class="line">                    tempi += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 修改覆盖后的target</span></span><br><span class="line">                <span class="keyword">if</span> hasletter <span class="keyword">and</span> stampj == slen:</span><br><span class="line">                    temptarget = temptarget[:index] + <span class="string">"?"</span>*slen + temptarget[index+slen:]</span><br><span class="line">                    <span class="keyword">return</span> index, temptarget</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>, temptarget</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 到完全覆盖时停止</span></span><br><span class="line">        <span class="keyword">while</span> temptarget != <span class="string">"?"</span>*tlen:</span><br><span class="line">            temp, temptarget = checkstamp(temptarget)</span><br><span class="line">            <span class="keyword">if</span> temp == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            res.append(temp)</span><br><span class="line">        <span class="comment"># 返回逆序序列</span></span><br><span class="line">        <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p><a href="https://leetcode.com/articles/stamping-the-sequence/" target="_blank" rel="noopener">参考链接</a></p><p>上述方法一的<code>checkstamp</code>过程有很多重复计算，事实上不需要每次都从头开始遍历，可以进行一些优化。</p><p>只进行一次字符串匹配的循环，在时间进行了优化，相应的内存消耗增加。<br>记录每一个位置 i 对应长度为lenS的字符串上有哪些部分是能对应的，哪些些是不对应的。再将完全对应的字符串的位置全部压入队列。</p><p>在队列中的每一个位置都是已匹配位置，在change中声明当前位置已匹配，之后考虑当前位置改动后可能会产生影响的所有位置 i 对应的长度为lenS的字符串。</p><h4 id="代码提交-1"><a href="#代码提交-1" class="headerlink" title="代码提交"></a>代码提交</h4><blockquote><p>Python2，用时436ms，内存14.4M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">movesToStamp</span><span class="params">(self, stamp, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type stamp: str</span></span><br><span class="line"><span class="string">        :type target: str</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        M, N = len(stamp), len(target)</span><br><span class="line"> </span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        done = [<span class="literal">False</span>] * N</span><br><span class="line">        ans = []</span><br><span class="line">        A = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N - M + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># For each window [i, i+M),</span></span><br><span class="line">            <span class="comment"># A[i] will contain info on what needs to change</span></span><br><span class="line">            <span class="comment"># before we can reverse stamp at i.</span></span><br><span class="line"> </span><br><span class="line">            made, todo = set(), set()</span><br><span class="line">            <span class="keyword">for</span> j, c <span class="keyword">in</span> enumerate(stamp):</span><br><span class="line">                a = target[i+j]</span><br><span class="line">                <span class="keyword">if</span> a == c:</span><br><span class="line">                    made.add(i+j)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    todo.add(i+j)</span><br><span class="line">            A.append((made, todo))</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># If we can reverse stamp at i immediately,</span></span><br><span class="line">            <span class="comment"># enqueue letters from this window.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> todo:</span><br><span class="line">                ans.append(i)</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i, i + len(stamp)):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> done[j]:</span><br><span class="line">                        queue.append(j)</span><br><span class="line">                        done[j] = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># For each enqueued letter,</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            i = queue.popleft()</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># For each window that is potentially affected,</span></span><br><span class="line">            <span class="comment"># j: start of window</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(max(<span class="number">0</span>, i-M+<span class="number">1</span>), min(N-M, i)+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> A[j][<span class="number">1</span>]:  <span class="comment"># This window is affected</span></span><br><span class="line">                    A[j][<span class="number">1</span>].discard(i) <span class="comment"># Remove it from todo list of this window</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> A[j][<span class="number">1</span>]:  <span class="comment"># Todo list of this window is empty</span></span><br><span class="line">                        ans.append(j)</span><br><span class="line">                        <span class="keyword">for</span> m <span class="keyword">in</span> A[j][<span class="number">0</span>]: <span class="comment"># For each letter to potentially enqueue,</span></span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">not</span> done[m]:</span><br><span class="line">                                queue.append(m)</span><br><span class="line">                                done[m] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>] <span class="keyword">if</span> all(done) <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;936、&lt;a href=&quot;https://leetcode-cn.com/problems/stamping-the-sequence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stamping The Sequence&lt;/a&gt;戳印序列&lt;/p&gt;
&lt;p&gt;难度：困难&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;You want to form a &lt;code&gt;target&lt;/code&gt; string of &lt;strong&gt;lowercase letters&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;At the beginning, your sequence is &lt;code&gt;target.length&lt;/code&gt; &lt;code&gt;&amp;#39;?&amp;#39;&lt;/code&gt; marks.  You also have a &lt;code&gt;stamp&lt;/code&gt; of lowercase letters.&lt;/p&gt;
&lt;p&gt;On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.  You can make up to &lt;code&gt;10 * target.length&lt;/code&gt; turns.&lt;/p&gt;
&lt;p&gt;For example, if the initial sequence is “?????”, and your stamp is &lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;,  then you may make “abc??”, “?abc?”, “??abc” in the first turn.  (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/tags/LeetCode/"/>
    
      <category term="贪心算法" scheme="https://lesley0416.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://lesley0416.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>异或操作&amp;位运算</title>
    <link href="https://lesley0416.github.io/2019/03/07/weiyunsuan/"/>
    <id>https://lesley0416.github.io/2019/03/07/weiyunsuan/</id>
    <published>2019-03-07T08:30:50.000Z</published>
    <updated>2019-03-13T14:45:03.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>做题时用到了按位异或的操作，有点蒙蒙的，大概查了查位运算的一些东西，略作总结，主要以Python为例。</p><p><a href="http://www.cnblogs.com/fuck1/p/5899402.html" target="_blank" rel="noopener">参考链接</a></p></blockquote><h2 id="位运算简介"><a href="#位运算简介" class="headerlink" title="位运算简介"></a>位运算简介</h2><p><strong>位运算是把数字用二进制表示之后，对每一位上0或1的运算。</strong></p><p>所有的运算（包括位运算）在计算机内部都是通过<strong>补码</strong>的形式进行运算的。</p><a id="more"></a><blockquote><p>补码是计算机表示数据的一般方式，其规则为：如果是正数，则表示方法和原码一样；如果是负数，则将数字的反码加上1(相当于将原码数值位取反然后在最低位加1)。</p><p>例如：</p><p>数字  6 在8位计算机中的补码为：0000 0110 （即为其原码）</p><p>数字 -6 在8位计算机中的补码为：1111 1010</p></blockquote><p>主要的位运算总共有6种：与、或、异或、取反、左移、右移，如下表所示：</p><blockquote><p>表中示例：</p><p>a=60，二进制表示 0011 1100</p><p>b=13，二进制表示 0000 1101</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:left">按位与：参与运算的两个值，如果两个对应位都为1，则该位的结果为1，否则为0；</td><td style="text-align:left">(a&amp;b)结果为12，二进制 0000 1100</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left"></td><td style="text-align:left">按位或：只要对应的两个二进制位中有一个为1时，该位的结果就为1；</td><td>(a\</td><td>b)结果为61，二进制 0011 1101</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">按位异或：当两个对应的二进制位不同时，该位的结果为1；</td><td style="text-align:left">(a^b)结果为49，二进制 0011 0001</td></tr><tr><td style="text-align:center">~</td><td style="text-align:left">按位取反：对数据的每个二进制位取反，即把1变成0，把0变成1；</td><td style="text-align:left">(~a)结果为 -61，二进制 1100 0011（有符号二进制数的补码形式）</td></tr><tr><td style="text-align:center">\&lt;\&lt;</td><td style="text-align:left">按位左移：数据的每个二进制位均左移若干位，\&lt;\&lt;右边的数字指定移动位数，高位丢弃，低位补0；</td><td style="text-align:left">(a\&lt;\&lt;2)结果为240，二进制 1111 0000</td></tr><tr><td style="text-align:center">>></td><td style="text-align:left">按位右移：数据的每个二进制位均右移若干位，>>右边的数字指定移动位数，具体见下文；</td><td style="text-align:left">(a>>2)结果为15，二进制 0000 1111</td></tr></tbody></table></div><ul><li><p>左移运算符：m\&lt;\&lt;n 表示把 m 左移 n 位，最左边的 n 位被丢弃，同时在最右边补上 n 个0，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00001010 &lt;&lt; 2 = 00101000</span><br><span class="line">10001010 &lt;&lt; 3 = 01010000</span><br></pre></td></tr></table></figure></li><li><p>右移运算符：m>>n 表示把 m 右移 n 位，最右边的 n 位被丢弃，但最左边的处理方式有所不同：如果符号位为0，则右移后高位补0，如果符号位为1，则高位补1，也就是说，如果数字是正数，则右移后在最左边补 n 个0，如果数字为负数，则右移后在最左边补 n 个1。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00001010 &gt;&gt; 2 = 00000010</span><br><span class="line">10001010 &gt;&gt; 3 = 11110001</span><br></pre></td></tr></table></figure></li></ul><p>如下为Python中所有位运算操作符示意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">60</span>            <span class="comment"># 60 = 0011 1100 </span></span><br><span class="line">b = <span class="number">13</span>            <span class="comment"># 13 = 0000 1101 </span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = a &amp; b;        <span class="comment"># 12 = 0000 1100</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"a &amp; b 的值为："</span>, c</span><br><span class="line">c = a | b;        <span class="comment"># 61 = 0011 1101 </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"a | b 的值为："</span>, c</span><br><span class="line">c = a ^ b;        <span class="comment"># 49 = 0011 0001</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"a ^ b 的值为："</span>, c</span><br><span class="line">c = ~a;           <span class="comment"># -61 = 1100 0011</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"  ~a  的值为："</span>, c</span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;       <span class="comment"># 240 = 1111 0000</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" a&lt;&lt;2 的值为："</span>, c</span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;       <span class="comment"># 15 = 0000 1111</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">" a&gt;&gt;2 的值为："</span>, c</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># a &amp; b 的值为： 12</span></span><br><span class="line"><span class="comment"># a | b 的值为： 61</span></span><br><span class="line"><span class="comment"># a ^ b 的值为： 49</span></span><br><span class="line"><span class="comment">#   ~a  的值为： -61</span></span><br><span class="line"><span class="comment">#  a&lt;&lt;2 的值为： 240</span></span><br><span class="line"><span class="comment">#  a&gt;&gt;2 的值为： 15</span></span><br></pre></td></tr></table></figure><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><h3 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h3><ul><li><p>左移运算符：m\&lt;\&lt;n 表示把 m 左移 n 位，最左边的 n 位被丢弃，同时在最右边补上 n 个0，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00001010 &lt;&lt; 2 = 00101000</span><br><span class="line">10001010 &lt;&lt; 3 = 01010000</span><br></pre></td></tr></table></figure></li><li><p>右移运算符：m>>n 表示把 m 右移 n 位，最右边的 n 位被丢弃，但最左边的处理方式有所不同：如果符号位为0，则右移后高位补0，如果符号位为1，则高位补1，也就是说，如果数字是正数，则右移后在最左边补 n 个0，如果数字为负数，则右移后在最左边补 n 个1。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00001010 &gt;&gt; 2 = 00000010</span><br><span class="line">10001010 &gt;&gt; 3 = 11110001</span><br></pre></td></tr></table></figure></li></ul><h3 id="特殊应用"><a href="#特殊应用" class="headerlink" title="特殊应用"></a>特殊应用</h3><ul><li><p><strong>移位运算是最有效的计算乘/除法的运算之一</strong>，把整数左/右移一位，和把整数乘以/除以 2 在数学上是等价的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> a &lt;&lt; <span class="number">1</span> <span class="comment"># 左移一位等效于a = a * 2;</span></span><br><span class="line"><span class="comment"># result: 4</span></span><br><span class="line"><span class="keyword">print</span> a &lt;&lt; <span class="number">2</span> <span class="comment"># a左移两位等效于a = a * 2的2次方（4）；</span></span><br><span class="line"><span class="comment"># result: 8</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">16</span></span><br><span class="line"><span class="keyword">print</span> a &gt;&gt; <span class="number">1</span> <span class="comment"># 右移一位等效于a = a / 2；</span></span><br><span class="line"><span class="comment"># result: 8</span></span><br><span class="line"><span class="keyword">print</span> a &gt;&gt; <span class="number">2</span> <span class="comment"># 右移两位等效于a = a / (2**2)；</span></span><br><span class="line"><span class="comment"># result: 4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h2><h3 id="运算规则-1"><a href="#运算规则-1" class="headerlink" title="运算规则"></a>运算规则</h3><p>0&amp;0=0，0&amp;1=0，1&amp;0=0，1&amp;1=1。</p><p>即：两位同时为“1”，结果才为“1”，否则为0，<strong>有0则0</strong>。</p><h3 id="特殊应用-1"><a href="#特殊应用-1" class="headerlink" title="特殊应用"></a>特殊应用</h3><ul><li><p><strong>清零指定位：</strong></p><p>mask中指定位置0，其它位为1，<code>a = a &amp; mask</code>。</p></li><li><p><strong>取一个数的指定二进制位：</strong></p><p>mask中指定位置1，其它位为0，<code>a = a &amp; mask</code>。</p></li><li><p><strong>判断一个数二进制表示中1的个数：</strong></p><p><strong>一个整数减去1，再和原数做与运算，会把该整数二进制表示中最右边一个1变为0。</strong></p><p>如：</p><ul><li><p>实现一个函数，输入一个正数，输出该数二进制表示中1的个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line">n=<span class="number">5</span> <span class="comment"># 二进制：101</span></span><br><span class="line"><span class="keyword">while</span>(n):</span><br><span class="line">    n &amp;= (n<span class="number">-1</span>)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> str(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># result: 2</span></span><br></pre></td></tr></table></figure></li><li><p>判断一个正数是不是2的整数次方：</p><p>如果是2的整数次方，则其二进制表示中有且只有一位是1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> a&amp;(a<span class="number">-1</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result: True</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="按位或"><a href="#按位或" class="headerlink" title="按位或"></a>按位或</h2><h3 id="运算规则-2"><a href="#运算规则-2" class="headerlink" title="运算规则"></a>运算规则</h3><p>0|0=0；0|1=1；1|0=1；1|1=1。</p><p>即 ：参加运算的两个对象只要有一个为1，其值为1，<strong>有1则1</strong>。</p><h3 id="特殊应用-2"><a href="#特殊应用-2" class="headerlink" title="特殊应用"></a>特殊应用</h3><ul><li><p><strong>对数据的指定位置为1：</strong></p><p>mask指定位置1，其它位为0，<code>a = a | mask</code>。</p><p>如：将 <code>a = 1010 0000</code> 低四位置1，则 <code>a | 0000 1111</code> 即可。</p></li></ul><h2 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h2><h3 id="运算规则-3"><a href="#运算规则-3" class="headerlink" title="运算规则"></a>运算规则</h3><p>0^0=0；0^1=1；1^0=1；1^1=0。</p><p>即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0，<strong>同0异1</strong>。</p><h4 id="异或特点："><a href="#异或特点：" class="headerlink" title="异或特点："></a>异或特点：</h4><ul><li><p><strong>0异或任何数均为原数</strong></p></li><li><p><strong>1异或任何数，结果为对该数取反</strong></p></li><li><strong>任何数异或自己，结果为0</strong></li></ul><h3 id="特殊应用-3"><a href="#特殊应用-3" class="headerlink" title="特殊应用"></a>特殊应用</h3><ul><li><p><strong>使特定位翻转：</strong></p><p>mask的特定位置1，其它位为0，<code>a = a ^ mask</code>。</p><p>如，对数10100001的第2位和第3位翻转，则可以将该数与00000110进行按位异或运算：<code>10100001^00000110 = 10100111</code>。</p></li><li><p><strong>不使用临时变量，交换两个数的值：</strong></p><p>如，交换两个整数a=10100001，b=00000110的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a^b <span class="comment"># a=10100111</span></span><br><span class="line">b = b^a <span class="comment"># b=10100001</span></span><br><span class="line">a = a^b <span class="comment"># a=00000110</span></span><br></pre></td></tr></table></figure></li><li><p><strong>与0异或，保留原值：</strong></p><p><code>a ^ 0</code>仍为<code>a</code>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;做题时用到了按位异或的操作，有点蒙蒙的，大概查了查位运算的一些东西，略作总结，主要以Python为例。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/fuck1/p/5899402.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;位运算简介&quot;&gt;&lt;a href=&quot;#位运算简介&quot; class=&quot;headerlink&quot; title=&quot;位运算简介&quot;&gt;&lt;/a&gt;位运算简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;位运算是把数字用二进制表示之后，对每一位上0或1的运算。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有的运算（包括位运算）在计算机内部都是通过&lt;strong&gt;补码&lt;/strong&gt;的形式进行运算的。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://lesley0416.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="位运算" scheme="https://lesley0416.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="异或" scheme="https://lesley0416.github.io/tags/%E5%BC%82%E6%88%96/"/>
    
      <category term="基础" scheme="https://lesley0416.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode】599、两个列表的最小索引总和</title>
    <link href="https://lesley0416.github.io/2019/03/04/leetcode_599/"/>
    <id>https://lesley0416.github.io/2019/03/04/leetcode_599/</id>
    <published>2019-03-04T13:30:50.000Z</published>
    <updated>2019-03-13T15:21:57.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>599、<a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">Minimum Index Sum of Two Lists</a> 两个列表的最小索引总和</p><p>难度：简单</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><ul><li><p>英文：</p><p>Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.</p><p>You need to help them find out their <strong>common interest</strong> with the <strong>least list index sum</strong>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.</p><a id="more"></a></li><li><p>中文：</p><p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]</span><br><span class="line">[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]</span><br><span class="line">Output: [&quot;Shogun&quot;]</span><br><span class="line">Explanation: The only restaurant they both like is &quot;Shogun&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]</span><br><span class="line">[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]</span><br><span class="line">Output: [&quot;Shogun&quot;]</span><br><span class="line">Explanation: The restaurant they both like and have the least index sum is &quot;Shogun&quot; with index sum 1 (0+1).</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>The length of both lists will be in the range of [1, 1000].</li><li>The length of strings in both lists will be in the range of [1, 30].</li><li>The index is starting from 0 to the list length minus 1.</li><li>No duplicates in both lists.</li></ol><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><blockquote><p>Python2，用时128ms，内存11.1M</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRestaurant</span><span class="params">(self, list1, list2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type list1: List[str]</span></span><br><span class="line"><span class="string">        :type list2: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dict1 = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(list1):</span><br><span class="line">            dict1[name] = index</span><br><span class="line">        </span><br><span class="line">        templist = []</span><br><span class="line">        tempsum = <span class="number">3000</span></span><br><span class="line">        <span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(list2):</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> dict1:</span><br><span class="line">                cursum = index+dict1[name]</span><br><span class="line">                <span class="keyword">if</span> cursum &lt; tempsum:</span><br><span class="line">                    templist = [name]</span><br><span class="line">                    tempsum = cursum</span><br><span class="line">                <span class="keyword">elif</span> cursum == tempsum:</span><br><span class="line">                    templist.append(name)</span><br><span class="line">        <span class="keyword">return</span> templist</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>Python查找dict的key时，应使用<code>if key in dict</code>，而不是<code>if key in dict.keys()</code>。</p><p>前者是在dict中查找，dict对象的存储结构是hash表，最优情况下查询复杂度为O(1)；</p><p>后者等于是在list中查找，list对象的存储结构是线性表，查询复杂度为O(n)。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;599、&lt;a href=&quot;https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minimum Index Sum of Two Lists&lt;/a&gt; 两个列表的最小索引总和&lt;/p&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;英文：&lt;/p&gt;
&lt;p&gt;Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.&lt;/p&gt;
&lt;p&gt;You need to help them find out their &lt;strong&gt;common interest&lt;/strong&gt; with the &lt;strong&gt;least list index sum&lt;/strong&gt;. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="https://lesley0416.github.io/tags/LeetCode/"/>
    
      <category term="哈希表" scheme="https://lesley0416.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>%time,%timeit魔法命令</title>
    <link href="https://lesley0416.github.io/2019/03/04/jupyter_timeit/"/>
    <id>https://lesley0416.github.io/2019/03/04/jupyter_timeit/</id>
    <published>2019-03-04T13:30:50.000Z</published>
    <updated>2019-03-13T15:21:24.362Z</updated>
    
    <content type="html"><![CDATA[<p>在Jupyter-notebook中有几个用于计时的魔法命令<code>%time</code>、<code>%%time</code>、<code>%timeit</code>、<code>%%timeit</code>，可以非常简单的获取部分代码的运行耗时。</p><blockquote><p>所有以<code>%</code>开头的方法，都是所谓的魔法命令（Magic function），也就是IPython内置的一些方法。魔法方法要区分<code>%</code>和<code>%%</code>，以<code>%</code>开头的叫做<code>line magic</code>，是专门针对一行的命令，以<code>%%</code>开头的叫做<code>cell magic</code>，是针对多行（一个cell）的命令。</p><p><strong>以<code>%%</code>开头的魔法命令，必须放在一个cell的第一行，并且统计该cell中剩余的所有代码。</strong><br><a id="more"></a><br>分别来看：</p></blockquote><ul><li><p><code>%time</code></p><p>给出<strong>当前行的代码运行一次</strong>所花费的时间；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">%time a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># CPU times: user 2 µs, sys: 1 µs, total: 3 µs</span></span><br><span class="line"><span class="comment"># Wall time: 5.01 µs</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>user：表示执行用户代码（内核外）消耗的CPU时间；</li><li>sys：表示进程在内核中消耗的CPU时间；</li></ul><p>所以，CPU总耗时看<code>total</code>即可，也就是<code>uset</code>和<code>sys</code>之和。</p><p><code>Wall time</code>是最终总耗时，包括IO、排队的耗时，也就是感知到的总耗时。</p><blockquote><p>Wall time $&lt;$ CPU 表明进程是计算密集型（CPU bound），利用多核处理器的并行执行优势；</p><p>Wall time $\approx$ CPU 表明进程是计算密集型，未并行执行；</p><p>Wall time $&gt;​$ CPU 表明进程是I/O密集型（I/O bound），多核并行执行优势并不明显；</p></blockquote></li><li><p><code>%%time</code></p><p>给出<strong>当前cell的代码运行一次</strong>所花费的时间；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># CPU times: user 2 µs, sys: 1e+03 ns, total: 3 µs</span></span><br><span class="line"><span class="comment"># Wall time: 5.96 µs</span></span><br></pre></td></tr></table></figure></li><li><p><code>%timeit -n 1000</code></p><p>给出<strong>当前行的代码运行n次</strong>所花费的时间（取最快三次的平均用时）；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%timeit -n <span class="number">10000</span> c = pow(<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 198 ns per loop</span></span><br></pre></td></tr></table></figure></li><li><p><code>%%timeit -n 1000</code></p><p>给出<strong>当前cell的代码运行n次</strong>所花费的时间（取最快三次的平均用时）；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10000</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">c=a</span><br><span class="line">a=b</span><br><span class="line">b=c</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 68.5 ns per loop</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Jupyter-notebook中有几个用于计时的魔法命令&lt;code&gt;%time&lt;/code&gt;、&lt;code&gt;%%time&lt;/code&gt;、&lt;code&gt;%timeit&lt;/code&gt;、&lt;code&gt;%%timeit&lt;/code&gt;，可以非常简单的获取部分代码的运行耗时。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有以&lt;code&gt;%&lt;/code&gt;开头的方法，都是所谓的魔法命令（Magic function），也就是IPython内置的一些方法。魔法方法要区分&lt;code&gt;%&lt;/code&gt;和&lt;code&gt;%%&lt;/code&gt;，以&lt;code&gt;%&lt;/code&gt;开头的叫做&lt;code&gt;line magic&lt;/code&gt;，是专门针对一行的命令，以&lt;code&gt;%%&lt;/code&gt;开头的叫做&lt;code&gt;cell magic&lt;/code&gt;，是针对多行（一个cell）的命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以&lt;code&gt;%%&lt;/code&gt;开头的魔法命令，必须放在一个cell的第一行，并且统计该cell中剩余的所有代码。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lesley0416.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://lesley0416.github.io/tags/Python/"/>
    
      <category term="计时" scheme="https://lesley0416.github.io/tags/%E8%AE%A1%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>若干Python性能优化小tips</title>
    <link href="https://lesley0416.github.io/2019/03/04/fasterpython/"/>
    <id>https://lesley0416.github.io/2019/03/04/fasterpython/</id>
    <published>2019-03-04T13:30:50.000Z</published>
    <updated>2019-03-13T15:21:14.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>若干简单易实现的Python性能优化小tips。</p><p>部分参考：<a href="https://segmentfault.com/a/1190000000666603" target="_blank" rel="noopener">https://segmentfault.com/a/1190000000666603</a></p><p>一些tips在刷题过程确实得到验证，尚有一些未验证但在实际简单测试中效率有提升。<br><a id="more"></a></p><h3 id="优化算法时间复杂度"><a href="#优化算法时间复杂度" class="headerlink" title="优化算法时间复杂度"></a>优化算法时间复杂度</h3></blockquote><p>不论什么语言，算法的时间复杂度对程序的执行效率都有决定性影响，在Python中可以通过选择合适的数据结构来优化时间复杂度，如list和set查找指定元素的时间复杂度分别为O(n)和O(1)。同时，可以根据具体情况，采用分治、贪心、动态规划等算法思想。（不过优化算法有些有时候也不是很容易实现，，，）</p><p>在算法的常见时间复杂度上排序如下：</p><script type="math/tex; mode=display">O(1)<O(\log n)<O(n\log n)<O(n^2)<O(n^3)<O(n^k)<O(k^n)<O(n!)</script><h3 id="使用dict或set查找元素"><a href="#使用dict或set查找元素" class="headerlink" title="使用dict或set查找元素"></a>使用dict或set查找元素</h3><p>Python中的dict和set是使用hash表实现的，因此查找元素的最优时间复杂度为O(1)，而list是线性表结构，其查询时间复杂度为O(n)。</p><p>因此，<strong>在需要频繁查找或访问的时候，依据实际情况使用dict或set，要比使用list更快</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run on jupyter-notebook</span></span><br><span class="line">a = range(<span class="number">1000</span>)</span><br><span class="line">s = set(a)</span><br><span class="line">d = dict((i,<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> a)</span><br><span class="line">%timeit -n <span class="number">10000</span> <span class="number">100</span> <span class="keyword">in</span> d</span><br><span class="line">%timeit -n <span class="number">10000</span> <span class="number">100</span> <span class="keyword">in</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 56.5 ns per loop</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 38.8 ns per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用set进行交并差运算"><a href="#使用set进行交并差运算" class="headerlink" title="使用set进行交并差运算"></a>使用set进行交并差运算</h3><p>set的union、intersection、difference操作要比使用list迭代快，因此涉及list求交集、并集、差集的问题，可以通过转换为set来操作。</p><p>set的交并差操作语法：</p><ul><li>交集：<code>set(list1)&amp;set(list2)</code></li><li>并集：<code>set(list1)|set(list2)</code></li><li>差集：<code>set(list1)-set(list2)</code></li></ul><p>使用list迭代方法求两个list交集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">1000</span></span><br><span class="line">lista=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">42</span>,<span class="number">44</span>] </span><br><span class="line">listb=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">23</span>] </span><br><span class="line">intersection=[] </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> lista: </span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> listb: </span><br><span class="line">        <span class="keyword">if</span> a == b:</span><br><span class="line">            intersection.append(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 3.58 µs per loop</span></span><br></pre></td></tr></table></figure><p>将list转为set后求交集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">1000</span></span><br><span class="line">lista=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">42</span>,<span class="number">44</span>] </span><br><span class="line">listb=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">23</span>] </span><br><span class="line">intersection=[] </span><br><span class="line">list(set(lista)&amp;set(listb))</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 1.58 µs per loop</span></span><br></pre></td></tr></table></figure><h3 id="优化循环"><a href="#优化循环" class="headerlink" title="优化循环"></a>优化循环</h3><p>对循环的优化遵循的原则是<strong>尽量减少循环过程中计算量</strong>，循环外可以做的事情不要放到循环内做，多重循环尽量将内层的计算提到上一层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run on jupyter-notebook</span></span><br><span class="line">a = range(<span class="number">10000</span>)</span><br><span class="line">size_a = len(a)</span><br><span class="line">%timeit -n <span class="number">1000</span> <span class="keyword">for</span> i <span class="keyword">in</span> a: k = len(a)</span><br><span class="line">%timeit -n <span class="number">1000</span> <span class="keyword">for</span> i <span class="keyword">in</span> a: k = size_a</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 361 µs per loop</span></span><br><span class="line"><span class="comment"># 1000 loops, best of 3: 161 µs per loop</span></span><br></pre></td></tr></table></figure><h3 id="优化多个判断表达式的顺序"><a href="#优化多个判断表达式的顺序" class="headerlink" title="优化多个判断表达式的顺序"></a>优化多个判断表达式的顺序</h3><p><strong>对于and，把满足条件少的表达式放在前面判断；对于or，把满足条件多的表达式放在后面判断。</strong></p><p>Python中的条件表达式是<code>lazy evaluation</code>的，也就是说对于表达式<code>if a and b</code>，在<code>a 为 false</code>的情况下，<code>b</code>表达式的值将不再计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run on jupyter-notebook</span></span><br><span class="line">a = range(<span class="number">2000</span>)  </span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &lt; <span class="number">20</span> <span class="keyword">or</span> <span class="number">1000</span> &lt; i &lt; <span class="number">2000</span>]</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> <span class="number">1000</span> &lt; i &lt; <span class="number">2000</span> <span class="keyword">or</span> i &lt; <span class="number">20</span>]     </span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> i &gt; <span class="number">1900</span>]</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt; <span class="number">1900</span> <span class="keyword">and</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">98.1</span> µs per loop</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">78.9</span> µs per loop</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">88.1</span> µs per loop</span><br><span class="line"><span class="number">100</span> loops, best of <span class="number">3</span>: <span class="number">37.4</span> µs per loop</span><br></pre></td></tr></table></figure><h3 id="字符串的优化"><a href="#字符串的优化" class="headerlink" title="字符串的优化"></a>字符串的优化</h3><p><strong>Python中的字符串对象是不可改变的</strong>，因此对字符串的操作如拼接、修改等都会产生一个新的字符串对象，而不是基于原字符串，这种持续的copy过程会在一定程度上影响Python的性能，特别是处理文本较多的情况下。</p><h4 id="字符串连接尽量使用join，而不是"><a href="#字符串连接尽量使用join，而不是" class="headerlink" title="字符串连接尽量使用join，而不是+"></a>字符串连接尽量使用join，而不是+</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">100</span></span><br><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>]  </span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    s += i</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 880 ns per loop</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">100</span></span><br><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">'m'</span>,<span class="string">'n'</span>]</span><br><span class="line">s = <span class="string">""</span>.join(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 570 ns per loop</span></span><br></pre></td></tr></table></figure><h4 id="尽量使用内置函数判断，而不是正则表达式"><a href="#尽量使用内置函数判断，而不是正则表达式" class="headerlink" title="尽量使用内置函数判断，而不是正则表达式"></a>尽量使用内置函数判断，而不是正则表达式</h4><p>在对字符串可以使用正则表达式或者内置函数进行判断时，尽量使用内置函数，如<code>str.isalpha(), str.isdigit(), str.startswith((&quot;x&quot;,&quot;y&quot;)), str.endswith((&quot;x&quot;,&quot;y&quot;))</code>。</p><h3 id="不使用中间变量交换两个变量的值"><a href="#不使用中间变量交换两个变量的值" class="headerlink" title="不使用中间变量交换两个变量的值"></a>不使用中间变量交换两个变量的值</h3><p>使用<code>a,b=b,a</code>的形式来交换<code>a,b</code>两个变量的值。</p><p>（实际简单测试过程中，时间差距并不总是很大，还没深究速度差异的内在原因。）</p><p>借助中间变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10000</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">c=a</span><br><span class="line">a=b</span><br><span class="line">b=c</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 68.5 ns per loop</span></span><br></pre></td></tr></table></figure><p>不借助中间变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%%timeit -n <span class="number">10000</span></span><br><span class="line">a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 38.3 ns per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用if-is，而不是"><a href="#使用if-is，而不是" class="headerlink" title="使用if is，而不是=="></a>使用<code>if is</code>，而不是<code>==</code></h3><p>使用<code>if a is True</code>要比使用<code>if a == True</code>快，同理<code>if a is not Noe</code>要比<code>if a != None</code>快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = range(<span class="number">10000</span>)</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i == <span class="literal">True</span>]</span><br><span class="line">%timeit -n <span class="number">100</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i <span class="keyword">is</span> <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 370 µs per loop</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 248 µs per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用级联比较x-lt-y-lt-z"><a href="#使用级联比较x-lt-y-lt-z" class="headerlink" title="使用级联比较x&lt;y&lt;z"></a>使用级联比较<code>x&lt;y&lt;z</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">%timeit -n <span class="number">1000000</span> <span class="keyword">if</span> x &lt; y &lt; z:<span class="keyword">pass</span></span><br><span class="line">%timeit -n <span class="number">1000000</span> <span class="keyword">if</span> x &lt; y <span class="keyword">and</span> y &lt; z:<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 1000000 loops, best of 3: 47.8 ns per loop</span></span><br><span class="line"><span class="comment"># 1000000 loops, best of 3: 50.2 ns per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用while-1，而不是while-True"><a href="#使用while-1，而不是while-True" class="headerlink" title="使用while 1，而不是while True"></a>使用<code>while 1</code>，而不是<code>while True</code></h3><p>在Python2.x中，True是全局变量，而不是关键字？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_1</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">100000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_true</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">100000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>: <span class="keyword">break</span>    </span><br><span class="line"></span><br><span class="line">m, n = <span class="number">1000000</span>, <span class="number">1000000</span> </span><br><span class="line">%timeit -n <span class="number">100</span> while_1()</span><br><span class="line">%timeit -n <span class="number">100</span> while_true()</span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 2.2 ms per loop</span></span><br><span class="line"><span class="comment"># 100 loops, best of 3: 3.4 ms per loop</span></span><br></pre></td></tr></table></figure><h3 id="使用-，而不是pow"><a href="#使用-，而不是pow" class="headerlink" title="使用**，而不是pow"></a>使用<code>**</code>，而不是<code>pow</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%timeit -n <span class="number">10000</span> c = pow(<span class="number">2</span>,<span class="number">20</span>)</span><br><span class="line">%timeit -n <span class="number">10000</span> c = <span class="number">2</span>**<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 207 ns per loop</span></span><br><span class="line"><span class="comment"># 10000 loops, best of 3: 16.4 ns per loop</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;若干简单易实现的Python性能优化小tips。&lt;/p&gt;
&lt;p&gt;部分参考：&lt;a href=&quot;https://segmentfault.com/a/1190000000666603&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000000666603&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一些tips在刷题过程确实得到验证，尚有一些未验证但在实际简单测试中效率有提升。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://lesley0416.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://lesley0416.github.io/tags/Python/"/>
    
      <category term="性能优化" scheme="https://lesley0416.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>HMM和Viterbi算法</title>
    <link href="https://lesley0416.github.io/2019/03/01/HMM_IM/"/>
    <id>https://lesley0416.github.io/2019/03/01/HMM_IM/</id>
    <published>2019-03-01T12:13:59.000Z</published>
    <updated>2019-03-04T14:27:33.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>试图实现一个基于隐马尔科夫模型的拼音输入法，根据用户输入的拼音序列转换为对应的汉字，完成中文的输入。</p><h3 id="输入法基本需求"><a href="#输入法基本需求" class="headerlink" title="输入法基本需求"></a>输入法基本需求</h3><ul><li>通常一个拼音会对应多个汉字，如何确定在当前状态下，输入的拼音对应哪个汉字；</li><li>拼音序列通常可以对应多种可能的汉字组合，如何确定哪一种组合是相对最好的一种组合，如对于拼音序列<code>yi chang</code>，有<code>异常、一场、宜昌</code>等多种汉字组合，如何进行选择；<a id="more"></a><h2 id="HMM简介"><a href="#HMM简介" class="headerlink" title="HMM简介"></a>HMM简介</h2></li></ul><h3 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a>模型定义</h3><p>HMM（Hidden Markov Models，隐马尔科夫模型）是一种基本的统计模型，可以应用在语音识别、自然语言处理、模式识别等很多领域。</p><p>HMM的一个前提是<strong>马尔科夫假设，即假设模型的当前状态仅依赖于前面的几个状态</strong>。马尔科夫假设极大的简化了问题，但也可能丢失一些重要信息。一个马尔科夫过程是指状态间的转移仅依赖于前<em>n</em>个状态的过程，该过程即为<strong><em>n</em>阶马尔科夫模型</strong>，其中<em>n</em>是影响下一个状态选择的前<em>n</em>个状态。（通常所说的HMM，指一阶HMM）</p><p>HMM是在一个标准的马尔科夫过程中引入一组隐藏状态，以及观察状态与隐藏状态之间的一些概率关系，描述了一个含有隐藏状态的马尔科夫过程。</p><p>使用HMM模型时，通常问题有以下两个主要特征：</p><ol><li>问题是基于序列的，如时间序列、状态序列；</li><li>问题中有两类数据，一类数据序列是可以观测到的，即观察序列，另一类数据序列是不能观测到的，即隐藏状态序列，简称状态序列；</li></ol><p>例如在打算要做拼音输入法任务中，可以将拼音看做是隐藏状态，而拼音转化的文字结果作为一系列的观察状态，可以看到，引入隐藏状态的同时，观察序列与隐藏过程也具有一定的概率关系。</p><p><img src="/2019/03/01/HMM_IM/HMM.jpg" style="zoom:60%"></p><p>可以参考上图，其中$Z_i​$为隐藏状态序列，$X_i​$为隐藏状态生成的观察状态序列。隐藏状态序列$Z_i​$满足马尔科夫过程的要求，且观察状态序列$X_i​$与$Z_i​$之间存在概率关系，即模型中的$X_i​$与$X_i+1​$是存在关联的。</p><h3 id="模型参数"><a href="#模型参数" class="headerlink" title="模型参数"></a>模型参数</h3><p>首先定义一些基本符号：</p><ul><li>$Q=\lbrace q_1,q_2,…,q_N \rbrace$，Q是所有可能的隐藏状态集合，其中N为可能的隐藏状态数，对应所有可能的汉字的状态数量；</li><li>$V=\lbrace v_1,v_2,…,v_M \rbrace$，V是所有可能的观察状态集合，其中M为可能的观察状态数，对应所有可能的拼音的状态数量；</li><li>$I=\lbrace i_1,i_2,…,i_T \rbrace​$，I 是长度为T的隐藏状态序列，对应用户输入的拼音序列所对应的汉字序列；</li><li>$O=\lbrace o_1,o_2,…o_T \rbrace​$，O 是对应的观察序列，对应用户输入的拼音序列；</li></ul><p>HMM除上述状态集合外，还包括三组概率集合，用一个三元组$\lambda​$来刻画HMM，可写作<strong>$\lambda = (A,B,\pi)​$</strong>。</p><ul><li><p><strong>A 是隐藏状态转移概率分布</strong>，通常用矩阵表示，称为状态转移矩阵：</p><script type="math/tex; mode=display">A=[a_{ij}]_{N\times N} \quad where\quad a_{ij}=P(i_{t+1}=q_j|i_t=q_i)</script><p>即，$a_{ij}​$ 是在时刻 <em>t</em>  处于状态 $q_i​$ 的条件下，在时刻 $t+1​$ 转移到状态 $q_j​$ 的概率，对应汉字到汉字之间的转移概率；</p></li><li><p><strong>B 是观察状态发射概率分布</strong>，通常用矩阵表示，称为混淆矩阵或发射矩阵：</p><script type="math/tex; mode=display">B=[b_{ik}]_{N\times M} \quad where\quad b_{ik}=P(o_t=v_k|i_t=q_i)</script><p>即，$b_{ik}​$ 是在时刻 <em>t</em> 下的隐藏状态 $q_i​$ 到观察状态 $v_k​$ 的发射概率，对应汉字到拼音之间的发射概率；</p></li><li><p><strong>π 是初始状态概率</strong>，用向量表示：</p><script type="math/tex; mode=display">\pi = (\pi_i)_N \quad where \quad \pi=P(i_1=q_i)</script><p>即，$\pi_i​$ 是在时刻 <em>t=1</em> 时处于隐藏状态 $q_i​$ 的概率；</p></li></ul><p>可以看到，HMM（一阶）有两个基本假设：</p><ol><li><p>齐次假设：</p><script type="math/tex; mode=display">P(i_t|i_{t-1},o_{t-1},i_{t-2},o_{t-2},...,i_1,o_1)=P(i_t|i_{t-1})</script><p>即，任意时刻的隐藏状态只依赖于它前一个时刻的隐藏状态；</p></li><li><p>观测独立性假设：</p><script type="math/tex; mode=display">P(o_t|i_{T-1},o_{T-1},i_{T-2},o_{T-2},...i_1,o_1)=P(o_t|i_t)</script><p>即，任意时刻的观察状态只依赖于当前时刻的隐藏状态；</p></li></ol><h3 id="用HMM解决的三类基本问题"><a href="#用HMM解决的三类基本问题" class="headerlink" title="用HMM解决的三类基本问题"></a>用HMM解决的三类基本问题</h3><p>一旦一个系统可以作为HMM被描述，则可以用来解决三个基本问题<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup>。其中前两个是模式识别的问题：给定HMM求一个观察序列的概率（评估），搜索最有可能生成一个观察序列的隐藏状态序列（解码）。第三个问题是给定观察序列生成一个HMM（学习）。</p><ul><li><p>评估（概率计算问题）：前向算法——动态规划</p><p>给定模型$\lambda = (A,B,\pi)​$和观察序列$O=\lbrace o_1,o_2,…o_T \rbrace​$，计算在模型 $ \lambda ​$ 参数已知的情况下，计算观察序列 $O​$ 出现的概率 $P(O|\lambda)​$；</p></li><li><p>学习（模型学习问题）：前向-后向算法（也叫Baum-Welch算法）——EM</p><p>已知观察序列$O=\lbrace o_1,o_2,…o_T \rbrace​$，学习使得观察序列概率 $P(O|\lambda)​$最大的模型$\lambda = (A,B,\pi)​$参数；</p><p>即根据观察序列用极大似然估计的方法估计参数生成隐马尔科夫模型；</p></li><li><p>解码（预测问题）：Viterbi算法——动态规划</p><p>已知模型$\lambda = (A,B,\pi)$和观察序列$O=\lbrace o_1,o_2,…o_T \rbrace$，求给定观察序列的情况下条件概率$P(I|O,\lambda)$最大的（隐藏）状态序列$I=\lbrace i_1,i_2,…,i_T \rbrace$；</p><p>即给定观察序列，搜索最有可能的对应的隐藏状态序列；</p></li></ul><h2 id="Viterbi算法"><a href="#Viterbi算法" class="headerlink" title="Viterbi算法"></a>Viterbi算法</h2><p>基于以上可知，拼音输入法的问题，属于解码问题，即已知模型和观察序列，求最有可能的对应的隐藏状态序列。</p><p>理论上，可以通过枚举所有的状态转移序列来求解解码问题，但效率非常低，暴力枚举的思路是枚举所有的长度T的状态序列，计算该状态序列与观察序列的联合概率。在状态种类为$N$的情况下，共有$N^T$种排列组合，每种组合计算联合概率的计算量为$T$，则总的计算复杂度为$O(TN^T)$ ，可见该方法并不可取。</p><p>因此常用维特比（Viterbi）算法来解决。</p><p><strong>Viterbi算法是一个通用的求序列最短路径的动态规划算法。</strong></p><p><img src="/2019/03/01/HMM_IM/Viterbi_animated_demo.gif" alt></p><p>如上图所示，Viterbi算法简单来说就是：从开始状态之后每走一步，就记录下到达该时刻每个状态时，对应该状态所有路径中的概率最大值，并且以这个最大值为基准继续向后前进。显然，如果这个最大值都不能使该状态成为最大似然估计路径上的节点的话，那么该节点的其他更小的概率值（包括对应的路径）就更不可能了。</p><p>Viterbi算法通过一种有效的方法来分析HMM模型的观察序列，并捕获最可能的隐藏序列，利用递归的方法减少计算量，并且对于观察序列的整个上下文都进行了很好的考虑，对包含噪音的序列也能进行良好的分析。</p><h3 id="Viterbi算法详细过程"><a href="#Viterbi算法详细过程" class="headerlink" title="Viterbi算法详细过程"></a>Viterbi算法详细过程</h3><blockquote><p>该部分内容主要参考<a href="www.52nlp.cn">52nlp</a>上关于HMM的详细讲解，整理一遍便于自己详细理解。</p></blockquote><p>如上文所说，通过暴力枚举的方法来找到最可能的序列的代价是非常昂贵的，因此Viterbi算法考虑用<strong>递归</strong>的方式来寻找最有可能的隐藏状态序列。所以，我们首先定义局部概率 $\delta​$ ，表示到达网格中的某个中间状态时的概率值，之后来详细了解如何在$t=1​$和$t=n (n&gt;1)​$时如何计算其局部概率值。</p><h4 id="定义局部概率和局部最佳路径"><a href="#定义局部概率和局部最佳路径" class="headerlink" title="定义局部概率和局部最佳路径"></a>定义局部概率和局部最佳路径</h4><p><img src="/2019/03/01/HMM_IM/wangge.png" style="zoom:50%"></p><p> 观察上图的网格，显示的是汉字对于观察序列（拼音序列）的一阶转移情况。对于网格中的每一个中间及终止状态，都有一个可以到达该状态的最可能路径。比如，在$t=3​$时刻的三个状态中，每一个都有一条到达该状态的最可能路径，可能如下图所示：</p><p><img src="/2019/03/01/HMM_IM/paths.gif"></p><p>这些路径即为局部最佳路径，而每条局部最佳路径的概率值即为局部概率$\delta​$，用$ \delta(i,t)​$表示在 $t​$ 时刻到达状态 $i​$ 的所有路径概率中最大的概率值，局部最佳路径即对应该最大概率值的隐藏状态序列。基于此可知，在 $t=T​$ 时刻，每个状态都有一个局部概率及相应的局部最佳路径，因此，可以通过选择该时刻局部概率值最大的状态（及其对应的最佳路径）来确定全局最佳路径，即全局最佳隐藏状态序列。</p><h4 id="计算-t-1-时刻的局部概率"><a href="#计算-t-1-时刻的局部概率" class="headerlink" title="计算$t=1$时刻的局部概率"></a>计算$t=1$时刻的局部概率</h4><p>局部概率指到达该状态时的最佳路径的概率值，当$t=1​$时，该路径是不存在的，因此，用$t=1​$时刻所处状态的初始概率值及相应观察状态的转移概率值来计算$t=1​$时的局部概率，即：</p><script type="math/tex; mode=display">\delta _1(i)=\pi (i)b_{io_1}</script><h4 id="计算-t-gt-1-时刻的局部概率"><a href="#计算-t-gt-1-时刻的局部概率" class="headerlink" title="计算$t&gt;1$时刻的局部概率"></a>计算$t&gt;1$时刻的局部概率</h4><p>考虑如图所示的网格：</p><p><img src="/2019/03/01/HMM_IM/abcxtrellis.gif"></p><p>计算 $t$ 时刻到达状态 $X$ 的最佳路径，显然，这条最佳路径一定会通过 $t-1$ 时刻的状态 $A$、$B$、$C$ 之中的某一个。也就是说，到达状态 $X$ 的最佳路径一定是路径<code>(状态序列），...，A，X</code>、<code>（状态序列），...，B，X</code>、<code>（状态序列），...，C，X</code>三条之中的一条。</p><p>我们知道在一阶马尔科夫假设下，状态 $X$ 在一个状态序列之后发生的概率只取决于之前的一个状态，也就是说，路径末端是 $AX$ 的最佳路径将是到达 $A$ 的最佳路径再紧跟 $X$ ，那么这条路径的概率即为：$P(到达状态A的最佳路径)\times P(X|A)\times P(观察状态|X)$。</p><p>由此可知，到达状态 $X$ 的最佳路径概率计算方式为：</p><script type="math/tex; mode=display">P(X\ at\ time\ t)=\max_{i=A,B,C}P(i\ at\ time\ (t-1))\times P(X|i)\times P(obs\ at\ time\ t|X)</script><p>其中，$P(i at time (t-1))​$是$t-1​$时刻的局部概率$\delta​$，$P(X|i)​$是状态转移概率（隐藏状态到观察状态的发射概率），$P(obs at time t|X)​$是观察概率。</p><p>对上述公式进行泛化可知，在 $t​$ 时刻，观察状态是 $k_t​$ ，到达隐藏状态 $i​$ 最佳局部路径概率为：</p><script type="math/tex; mode=display">\delta _t(i)=\max \limits_j(\delta _{t-1}(j)\times a_{ji}\times b_{io_t})</script><p>我们假设前一个状态的局部概率已知，同时利用状态转移概率和对应的观察概率，就可以从中选择当前状态的最大概率了（局部概率 $\delta$ ）。</p><h4 id="使用反向指针记录最佳路径"><a href="#使用反向指针记录最佳路径" class="headerlink" title="使用反向指针记录最佳路径"></a>使用反向指针记录最佳路径</h4><p><img src="/2019/03/01/HMM_IM/wangge.png" style="zoom:50%"></p><p>考虑上图的网格，经过前面的过程我们已经得到了每个状态的局部概率，但我们最终的目标是希望得到网格中的最佳隐藏序列，也就是说，最终的目标是需要得到网格中的局部最佳路径。</p><p>回顾之前我们得到局部概率的过程，$t$ 时刻的局部概率是通过 $t-1$ 时刻的局部概率得到的，也就是说，在计算得到 $t$ 时刻的局部概率 $\delta _t(i)$ 之后，我们就可以知道这个局部概率 $\delta _t(i)$ 是由 $t-1$ 时刻的哪一个状态而得到的。因此，在这个过程中，我们通过给每一个状态赋予一个反向指针 $\psi$ 来记录，这个指针指向导致当前状态最优概率的前一时刻的某个状态。</p><p>反向指针在形式上的公式如下：</p><script type="math/tex; mode=display">\psi _t(i)=argmax_j(\delta _{t-1}(j)a_{ji})</script><p>这个反向指针的表达式是通过转移概率（某时刻的隐藏状态，演变到下一时刻某个隐藏状态的概率）以及前一时刻的局部概率计算得到的，没有使用到观察概率（隐藏状态到观察状态的发射概率）。</p><p>经过上述过程，已经可以通过递归的方式得到网格中每个状态的最佳局部概率，以及相应的局部最佳路径。</p><p>在使用Viterbi算法的过程中，我们对于网格中的每一个状态都计算一个局部概率，同时包含一个反向指针来指向最可能到达该状态的路径。当完成整个计算过程之后，我们首先在终止状态找到最可能的状态，之后通过反向指针回溯到初始时刻，从而回溯路径对应的状态序列就是我们最终得到的最佳的隐藏状态序列了。</p><h3 id="Viterbi算法形式化表达及计算流程"><a href="#Viterbi算法形式化表达及计算流程" class="headerlink" title="Viterbi算法形式化表达及计算流程"></a>Viterbi算法形式化表达及计算流程</h3><p>上文对Viterbi算法的流程做了详细的梳理，现在来总结一下Viterbi算法的形式化定义及完整流程：</p><ul><li><p>输入：HMM模型 $\lambda =(A,B,\pi)$ ，观察序列 $O=(o_1,o_2,…o_T)$ ；</p></li><li><p>输出：最有可能的隐藏状态序列 $I^*=\lbrace i_1^*,i_2^*,…i_T^*\rbrace$ ；</p></li><li><p>算法流程：</p><ul><li><p><strong>初始化局部状态（$t=1$）</strong>：</p><script type="math/tex; mode=display">\delta _1(i)=\pi _ib_{io_1}\ ,\ i=1,2,...N</script><script type="math/tex; mode=display">\psi _1(i)=0\ ,\ i=1,2,...N</script><p>其中， $N​$ 表示隐藏状态的长度，在拼音转汉字的过程中对应汉字的长度。</p><p>这一步通过观察状态的初始概率，和对应的观察状态到隐藏状态的发射概率，得到初始时刻的局部概率。</p></li><li><p><strong>递推，通过动态规划递推时刻 $t=2,3,…T$ 时刻的局部状态（$t&gt;1$）</strong>：</p><script type="math/tex; mode=display">\delta _t(i)=\max_{1\leq j\leq N}[\delta _{t-1}(j)a_{ji}]b_{io_t}\ ,\ i=1,2,...N</script><script type="math/tex; mode=display">\psi _t(i)=\arg\max _{1\leq j\leq N}[\delta _{t-1}(j)a_{ji}]\ ,\ i=1,2,...N</script><p>其中，$i$ 表示当前时刻隐藏序列的各个状态，$j$ 表示前一时刻隐藏序列的各个状态。</p><p>当前状态节点的选取，是通过考虑所有的转移概率，包括当前的发射概率，以及前一时刻的局部概率，综合计算，最后记录最大值，同时也记录了最大概率对应的前一时刻的状态节点。</p></li><li><p><strong>终止</strong>：</p><script type="math/tex; mode=display">P^*=\max _{1\leq i\leq N}\delta _T(i)</script><script type="math/tex; mode=display">i_T^*=\arg \max _{1\leq i\leq N}[\delta _T(i)]</script><p>计算终止时刻 <em>T</em> 时刻最大的概率值$\delta _T(i)$，即为最佳隐藏状态序列出现的概率，计算终止时刻 <em>T</em> 时刻最大的$\psi _t(i)$，即为最佳的隐藏状态。</p></li><li><p><strong>回溯最优路径</strong>，对$t=T-1,T-2,…,1$：</p><script type="math/tex; mode=display">i_t^*=\psi _{t+1}(i_{t+1}^*)</script><p>按照此过程回溯整个网格，回溯完成时，就得到了生成给定观察序列的最可能的隐藏状态序列 $I^*=(i_1^*,i_2^*,…i_T^*)$。</p></li></ul></li></ul><h3 id="Viterbi算法代码实现"><a href="#Viterbi算法代码实现" class="headerlink" title="Viterbi算法代码实现"></a>Viterbi算法代码实现</h3><h4 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h4><blockquote><p>主要参考umdhmm代码实现。</p></blockquote><p>HMM模型结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> N;<span class="comment">/* number of hidden states;  Q=&#123;1,2,...,N&#125; */</span></span><br><span class="line"><span class="keyword">int</span> M; <span class="comment">/* number of observation symbols; V=&#123;1,2,...,M&#125;*/</span></span><br><span class="line"><span class="keyword">double</span>**A;<span class="comment">/* A[1..N][1..N]. a[i][j] is the transition prob</span></span><br><span class="line"><span class="comment">   of going from state i at time t to state j</span></span><br><span class="line"><span class="comment">   at time t+1 */</span></span><br><span class="line"><span class="keyword">double</span>**B;<span class="comment">/* B[1..N][1..M]. b[j][k] is the probability of</span></span><br><span class="line"><span class="comment">   of observing symbol k in state j */</span></span><br><span class="line"><span class="keyword">double</span>*pi;<span class="comment">/* pi[1..N] pi[i] is the initial state distribution. */</span></span><br><span class="line">&#125; HMM;</span><br></pre></td></tr></table></figure><p>Viterbi算法主流程实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Viterbi</span><span class="params">(HMM *phmm, <span class="keyword">int</span> T, <span class="keyword">int</span> *O, <span class="keyword">double</span> **delta, <span class="keyword">int</span> **psi, </span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">int</span> *q, <span class="keyword">double</span> *pprob)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;<span class="comment">/* state indices */</span></span><br><span class="line"><span class="keyword">int</span>  t;<span class="comment">/* time index */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>maxvalind;</span><br><span class="line"><span class="keyword">double</span>maxval, val;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. Initialization  */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= phmm-&gt;N; i++) &#123;</span><br><span class="line">delta[<span class="number">1</span>][i] = phmm-&gt;pi[i] * (phmm-&gt;B[i][O[<span class="number">1</span>]]);</span><br><span class="line">psi[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. Recursion */</span></span><br><span class="line"><span class="keyword">for</span> (t = <span class="number">2</span>; t &lt;= T; t++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= phmm-&gt;N; j++) &#123;</span><br><span class="line">maxval = <span class="number">0.0</span>;</span><br><span class="line">maxvalind = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= phmm-&gt;N; i++) &#123;</span><br><span class="line">val = delta[t<span class="number">-1</span>][i]*(phmm-&gt;A[i][j]);</span><br><span class="line"><span class="keyword">if</span> (val &gt; maxval) &#123;</span><br><span class="line">maxval = val;</span><br><span class="line">maxvalind = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delta[t][j] = maxval*(phmm-&gt;B[j][O[t]]);</span><br><span class="line">psi[t][j] = maxvalind; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. Termination */</span></span><br><span class="line">*pprob = <span class="number">0.0</span>;</span><br><span class="line">q[T] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= phmm-&gt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta[T][i] &gt; *pprob) &#123;</span><br><span class="line">*pprob = delta[T][i];</span><br><span class="line">q[T] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. Path (state sequence) backtracking */</span></span><br><span class="line"><span class="keyword">for</span> (t = T - <span class="number">1</span>; t &gt;= <span class="number">1</span>; t--)</span><br><span class="line">q[t] = psi[t+<span class="number">1</span>][q[t+<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于HMM实现拼音输入法主流程"><a href="#基于HMM实现拼音输入法主流程" class="headerlink" title="基于HMM实现拼音输入法主流程"></a>基于HMM实现拼音输入法主流程</h2><p>在拼音输入法的主要过程中，HMM模型可以通过以下过程得到：</p><ul><li>对训练数据的所有内容按照单字分词，并统计每个词出现的频率，以此作为初始概率 $\pi​$ ;</li><li>将训练数据的所有汉字都转换成对应的拼音，统计每个拼音对应的汉字以及各自出现的频率，以此作为发射概率 $B​$ ;</li><li>统计训练数据中每个汉字后面出现的汉字的频率，以此作为隐藏状态的转移概率 $A$ ;</li></ul><p>经过上述过程，即可得到一个隐马尔科夫模型 $\lambda(\pi,A,B)$ 。</p><p>在此基础上，使用Viterbi算法，对用户输入的拼音序列进行解码，即可得到最终的汉字序列。</p><p>在实际应用过程中，对于一些转移概率为0的情况，可以默认设置一个较小的转移概率来避免计算结果为0的情况；同时，对于未登录词，也可以通过设置较小的初始概率来解决概率为0的问题。</p><blockquote id="fn_ 1"><sup> 1</sup>. <a href="http://www.52nlp.cn/hmm-learn-best-practices-four-hidden-markov-models" target="_blank" rel="noopener">http://www.52nlp.cn/hmm-learn-best-practices-four-hidden-markov-models</a><a href="#reffn_ 1" title="Jump back to footnote [ 1] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;试图实现一个基于隐马尔科夫模型的拼音输入法，根据用户输入的拼音序列转换为对应的汉字，完成中文的输入。&lt;/p&gt;
&lt;h3 id=&quot;输入法基本需求&quot;&gt;&lt;a href=&quot;#输入法基本需求&quot; class=&quot;headerlink&quot; title=&quot;输入法基本需求&quot;&gt;&lt;/a&gt;输入法基本需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通常一个拼音会对应多个汉字，如何确定在当前状态下，输入的拼音对应哪个汉字；&lt;/li&gt;
&lt;li&gt;拼音序列通常可以对应多种可能的汉字组合，如何确定哪一种组合是相对最好的一种组合，如对于拼音序列&lt;code&gt;yi chang&lt;/code&gt;，有&lt;code&gt;异常、一场、宜昌&lt;/code&gt;等多种汉字组合，如何进行选择；&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="https://lesley0416.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="HMM" scheme="https://lesley0416.github.io/tags/HMM/"/>
    
      <category term="隐马" scheme="https://lesley0416.github.io/tags/%E9%9A%90%E9%A9%AC/"/>
    
      <category term="Viterbi" scheme="https://lesley0416.github.io/tags/Viterbi/"/>
    
      <category term="拼音输入法" scheme="https://lesley0416.github.io/tags/%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>My Real Hello World</title>
    <link href="https://lesley0416.github.io/2019/02/27/myHello/"/>
    <id>https://lesley0416.github.io/2019/02/27/myHello/</id>
    <published>2019-02-27T15:13:59.000Z</published>
    <updated>2019-03-04T14:31:58.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/02/27/myHello/bengchuang.GIF" alt="bengchuang"></p><blockquote class="blockquote-center"><p>This is my real hello world from hexo.</p><p>**Lesley Shi**</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/02/27/myHello/bengchuang.GIF&quot; alt=&quot;bengchuang&quot;&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;
&lt;p&gt;This is my real hello world
      
    
    </summary>
    
    
      <category term="test" scheme="https://lesley0416.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lesley0416.github.io/2019/02/27/hello-world/"/>
    <id>https://lesley0416.github.io/2019/02/27/hello-world/</id>
    <published>2019-02-27T12:13:59.000Z</published>
    <updated>2019-03-04T14:29:42.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
